{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\GreedyAssignment\\\\assignment\\\\src\\\\Dijkstra\\\\solution.js\";\nimport React from \"react\";\nimport jsgraphs from \"js-graph-algorithms\";\n\nfunction DijkstraSolution(props) {\n  let numberOfNodes = parseInt(props.nodeCount);\n  var g = new jsgraphs.WeightedDiGraph(numberOfNodes);\n  props.mainData.forEach(NodeRelation => {\n    let start = parseInt(NodeRelation.startNode);\n    let end = parseInt(NodeRelation.endNode);\n    let cost = parseInt(NodeRelation.cost); // Creation of Edge\n\n    g.addEdge(new jsgraphs.Edge(start, end, cost));\n  });\n  let source = parseInt(props.data[0].source);\n  let dest = parseInt(props.data[0].destination); // Start Node for algorithm\n\n  var dijkstra = new jsgraphs.Dijkstra(g, source); // End Node\n\n  var v = dest;\n  var path;\n  path = dijkstra.pathTo(v);\n\n  if (dijkstra.hasPathTo(v)) {\n    for (var i = 0; i < path.length; ++i) {\n      var e = path[i];\n      console.log(e.from() + ' => ' + e.to() + ': ' + e.weight);\n    }\n\n    console.log('distance: ' + dijkstra.distanceTo(v));\n  }\n\n  function printPath(p) {\n    return /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, p.from(), \"  =>  \", p.to(), \" :: Cost= \", p.weight);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"Solution\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, \"Source : \", source), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, \"Destination : \", dest)), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, \"PATH : \"), dijkstra.hasPathTo(v) ? path.map(printPath()) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 62\n    }\n  }, \"No Path Found\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"Total Cost:  \", dijkstra.distanceTo(v)));\n}\n\nexport default DijkstraSolution;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/GreedyAssignment/assignment/src/Dijkstra/solution.js"],"names":["React","jsgraphs","DijkstraSolution","props","numberOfNodes","parseInt","nodeCount","g","WeightedDiGraph","mainData","forEach","NodeRelation","start","startNode","end","endNode","cost","addEdge","Edge","source","data","dest","destination","dijkstra","Dijkstra","v","path","pathTo","hasPathTo","i","length","e","console","log","from","to","weight","distanceTo","printPath","p","marginTop","map"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport jsgraphs from \"js-graph-algorithms\";\r\n\r\nfunction DijkstraSolution(props){\r\n\r\n    let numberOfNodes= parseInt(props.nodeCount);\r\n\r\n\r\n\r\n    var g = new jsgraphs.WeightedDiGraph(numberOfNodes);\r\n\r\n\r\n    (props.mainData).forEach(NodeRelation => {\r\n        \r\n        let start= parseInt(NodeRelation.startNode);\r\n        let end= parseInt(NodeRelation.endNode);\r\n        let cost= parseInt(NodeRelation.cost);\r\n\r\n\r\n        // Creation of Edge\r\n        g.addEdge(new jsgraphs.Edge(start, end, cost));\r\n    });\r\n\r\n\r\n\r\n    let source= parseInt(props.data[0].source);\r\n    let dest= parseInt(props.data[0].destination);\r\n\r\n\r\n    // Start Node for algorithm\r\n    var dijkstra = new jsgraphs.Dijkstra(g, source);\r\n\r\n    // End Node\r\n    var v= dest;\r\n    var path;\r\n    path = dijkstra.pathTo(v);\r\n\r\n    if(dijkstra.hasPathTo(v)){\r\n    \r\n        for(var i = 0; i < path.length; ++i) {\r\n            var e = path[i];\r\n            console.log(e.from() + ' => ' + e.to() + ': ' + e.weight);\r\n        }\r\n        \r\n        console.log('distance: '  + dijkstra.distanceTo(v) );\r\n}\r\n\r\n    function printPath(p){\r\n        return(\r\n            <h3>{p.from()}  =>  {p.to()} :: Cost= {p.weight}</h3>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h2>Solution</h2>\r\n            <div style={{marginTop: \"10px\"}}>\r\n\r\n                <h3>Source : {source}</h3>\r\n                <h3>Destination : {dest}</h3>\r\n\r\n            </div>\r\n            <br></br>\r\n            <h4>PATH : </h4>\r\n\r\n            {dijkstra.hasPathTo(v) ? path.map(printPath()) : <h3>No Path Found</h3>}\r\n            \r\n            <h4>Total Cost:  {dijkstra.distanceTo(v)}</h4>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DijkstraSolution;"]},"metadata":{},"sourceType":"module"}