{"version":3,"sources":["components/Header.js","components/Card.js","data/card-data.js","components/Main.js","Knapsack/solution.js","Knapsack/main.js","Knapsack/knapsack.js","TaskScheduling/solution.js","TaskScheduling/main.js","TaskScheduling/taskschedule.js","MST/graph.js","MST/solution.js","MST/main.js","MST/mst.js","Huffmann/solution.js","Huffmann/main.js","Huffmann/huffmann.js","Dijkstra/solution.js","Dijkstra/main.js","Dijkstra/dijkstra.js","plottedGraphs/knapChart.js","plottedGraphs/activityChart.js","plottedGraphs/mstChart.js","plottedGraphs/DijkstraChart.js","plottedGraphs/huffmann.js","plottedGraphs/graphs.js","components/App.js","index.js"],"names":["Header","to","className","Card","props","cardStyle","width","height","margin","backgroundColor","borderRadius","buttonStyle","border","name","id","class","style","desc","link","data","description","createCard","item","Main","map","Solution","dataArray","Array","maxWeight","i","mainData","length","obj","ratio","value1","value2","index","push","sort","a","b","ans","fill","borderBottom","w","path","weightvalue","parseInt","getSolution","SolutionKnapsack","useState","fields","setFields","maxW","setmaxW","solution","setSolution","marginTop","type","placeholder","onChange","e","event","value","target","handleWeight","onClick","values","handleAdd","field","idx","key","handleChangeValue1","marginLeft","handleChangeValue2","splice","handleRemove","Knapsack","fontWeight","starttime","endtime","total_activities","k","activity","SolutionActivity","handleChangeStart","handleChangeEnd","TaskSchedule","Graph","domNode","useRef","network","tempNode","n","label","nodes","DataSet","tempEdges","forEach","d","from","edges","options","useEffect","current","Network","ref","graph","solutionArray","V","adjMatrix","j","startNode","endNode","edgeWeight","createAdjMatrix","vertex","MST","visited","minEdge","Infinity","r","indexOf","prims","nodeCount","SolutionMST","numberOfNodes","setNumber","number","handleNumberOfNode","handleStartNode","handleEndNode","handleEdgeWeight","HuffmanEncoding","str","this","count_chars","pq","BinaryHeap","x","ch","size","pair1","pop","pair2","tree","encoding","_generate_encoding","encoded_string","counter","prototype","ary","prefix","individualcodes","scoreFunction","content","inspect_encoding","sample","element","bubbleUp","result","end","sinkDown","remove","node","score","parentN","Math","floor","parent","elemScore","child2N","child1N","swap","child1","child1Score","child2","huff","letterCode","SolutionHuffmann","text","setText","rows","cols","newtext","handleTextChange","Huffmann","DijkstraSolution","g","jsgraphs","WeightedDiGraph","NodeRelation","start","cost","addEdge","Edge","source","dest","destination","dijkstra","Dijkstra","v","hasPathTo","pathTo","p","weight","distanceTo","algoData","setAlgoData","handleSource","handleDestination","KnapChart","labels","datasets","borderColor","legend","fontColor","fontSize","scales","yAxes","ticks","beginAtZero","scaleLabel","display","labelString","xAxes","TaskChart","PrimChart","DijkstraChart","HuffChart","Graphs","App","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01b26623.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nfunction Header(){\r\n    return(\r\n       \r\n        <header>\r\n     \r\n            <Link to =\"/\">\r\n                <p >Greedy Techniques</p> \r\n            </Link>\r\n\r\n            <div className=\"tabs container row\">\r\n            {/* <Link to =\"/\">\r\n                <button className= \"btn btn-primary\">Single Source</button>\r\n            </Link>\r\n            <Link to =\"/\">\r\n                <button className= \"btn btn-primary\">Task Scheduling</button>\r\n            </Link>\r\n            <Link to =\"/\">\r\n                <button className= \"btn btn-primary\">Huffmann</button>\r\n            </Link>\r\n            <Link to =\"/\">\r\n                <button className= \"btn btn-primary\">Spanning Tree</button>\r\n            </Link>\r\n            <Link to =\"/\">\r\n                <button className= \"btn btn-primary\">Knapsack</button>\r\n            </Link> */}\r\n\r\n            </div>\r\n           \r\n\r\n        </header>\r\n       \r\n\r\n        \r\n\r\n        \r\n\r\n      \r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction Card(props){\r\n\r\n    // Dynamic Styling of cards \r\n    var cardStyle= {\r\n        width : \"35rem\",\r\n        height: \"25rem\",\r\n        margin : \"0 auto\",\r\n        backgroundColor: \"#f6376d\", \r\n        borderRadius: \"10px\"\r\n    }\r\n\r\n    var buttonStyle={\r\n        backgroundColor: \"#263145\" ,\r\n        borderRadius: \"10px\",\r\n        border: \"none\"\r\n    }\r\n\r\n    if(props.name===\"Graphs\"){\r\n        cardStyle.backgroundColor= \"#263145\";\r\n        buttonStyle.backgroundColor= \"#f6376d\";\r\n    }\r\n    // /////////////////////////////////////////\r\n\r\n\r\n\r\n    return(\r\n        <div id=\"mycard\">\r\n            <div class=\"col-lg-4 col-sm-6\">\r\n                <div class=\"card\" style={cardStyle}>\r\n\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">{props.name}</h5>\r\n                        <p class=\"card-text\" >{props.desc}</p>\r\n\r\n                        {/* This is for routing to the specific pages on click */}\r\n                        <Link to= {props.link}>\r\n                        <button class=\"btn btn-primary \" style={buttonStyle}>Go to Page</button>\r\n                        </Link>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","const data=[\r\n{\r\n    name: \"Fractional knapsack\",\r\n    description : \"Given a set of items, each with a weight and a value, determine a subset of items to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.\"\r\n    ,link: \"/knapsack\"\r\n},\r\n{\r\n    name: \"Minimum Spanning Tree\",\r\n    description : \"Given a connected and undirected graph, a spanning tree of that graph is a subgraph that is a tree and connects all the vertices together.\"\r\n    ,link: \"/mst\"\r\n},\r\n{\r\n    name: \"Huffmann Coding\",\r\n    description : \"A Huffman code is a particular type of optimal prefix code that is commonly used for lossless data compression. The process of finding or using such a code proceeds by means of Huffman coding\"\r\n    ,link: \"/huffmann\"\r\n},\r\n{\r\n    name: \"Task Scheduling Problem\",\r\n    description : \"This is the dispute of optimally scheduling unit-time tasks on a single processor, where each job has a deadline and a penalty that necessary be paid if the deadline is missed.\"\r\n    ,link: \"/taskscheduling\"\r\n},\r\n{\r\n    name: \"Single source shortest path\",\r\n    description : \"The shortest path problem is about finding a path between 2 vertices in a graph such that the total sum of the edges weights is minimum.\"\r\n    ,link: \"/singlesource\"\r\n},\r\n{\r\n    name: \"Graphs\",\r\n    description: \"The time-input size graphs plotted for these algorithms.\",\r\n    link: \"/graphs\"\r\n}\r\n];\r\n\r\nexport default data;","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport data from \"../data/card-data\";\r\n\r\nfunction createCard(item){\r\n    return (\r\n        <Card \r\n            name= {item.name}\r\n            desc= {item.description}\r\n            link= {item.link}\r\n        />\r\n    )\r\n}\r\n\r\nfunction Main(){\r\n    return(\r\n        <div id=\"intro-section\">\r\n        <div class=\"container-fluid\">\r\n        <div class=\"row\">\r\n            {data.map(createCard)}\r\n        </div>\r\n        </div>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React, {useState} from \"react\";\r\n\r\nfunction Solution(props){\r\n\r\n    const dataArray =new Array();\r\n    const maxWeight= props.maxWeight;\r\n\r\n    for(let i=0;i<props.mainData.length;i++){\r\n        let pwratio= props.mainData[i].value1/props.mainData[i].value2;\r\n\r\n        let obj= {ratio: pwratio, index: i};\r\n        \r\n        dataArray.push(obj);\r\n    }\r\n    dataArray.sort((a,b) => (a.ratio > b.ratio) ? 1 : -1);\r\n    // console.log(dataArray);\r\n\r\n    let ans= new Array(dataArray.length).fill(0);\r\n    // console.log(ans);\r\n\r\n\r\n\r\n    // Main Code\r\n    function getSolution(){\r\n        let w=0;\r\n        \r\n\r\n        for(let i=dataArray.length-1; i>=0; i--){\r\n\r\n            let obj= dataArray[i];\r\n\r\n            let path= obj.index;\r\n\r\n            let weightvalue= props.mainData[path].value2;\r\n            let profitvalue= props.mainData[path].value1;\r\n            weightvalue= parseInt(weightvalue);\r\n\r\n            if( w + weightvalue < maxWeight){\r\n\r\n                ans[path]= 1*weightvalue;\r\n                w+= weightvalue;\r\n\r\n            } else{\r\n                ans[path]= ((maxWeight-w)/ weightvalue)* weightvalue;\r\n                w= maxWeight;\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    return (\r\n        <div id=\"knapsacksolution\">\r\n            <h1 style={{borderBottom: \"2px solid black\"}}>Solution : </h1>\r\n            <br></br>\r\n            <h3>Max weight : {props.maxWeight}</h3>\r\n            {getSolution()}\r\n\r\n            <h3>Weights to pick of respective items : </h3>\r\n            {ans.map( item => <h3>{item} kg</h3>)}\r\n\r\n        </div>\r\n        \r\n\r\n    )\r\n}\r\n\r\nexport default Solution;","import React, {useState} from \"react\";\r\nimport Solution from \"./solution\";\r\n\r\nfunction SolutionKnapsack(){\r\n\r\n    const [fields, setFields] = useState([{ value1: null, value2: null }]);\r\n    const [maxW, setmaxW] = useState(null);\r\n    const [solution, setSolution]= useState(false);\r\n  \r\n\r\n    function handleWeight(event){\r\n        const value= event.target.value;\r\n        setmaxW(value);\r\n    }\r\n\r\n    function handleChangeValue1(i, event) {\r\n      const values = [...fields];\r\n      values[i].value1 = event.target.value;\r\n      setFields(values);\r\n    }\r\n\r\n    function handleChangeValue2(i, event){\r\n        const values = [...fields];\r\n        values[i].value2 = event.target.value;\r\n        setFields(values);\r\n    }\r\n  \r\n    function handleAdd() {\r\n      const values = [...fields];\r\n      values.push({ value1: null, value2: null });\r\n      setFields(values);\r\n    }\r\n  \r\n    function handleRemove(i) {\r\n      const values = [...fields];\r\n      values.splice(i, 1);\r\n      setFields(values);\r\n    }\r\n\r\n    function getSolution(){\r\n                \r\n        setSolution(true);\r\n    }\r\n\r\n  \r\n  \r\n    return (\r\n\r\n      <div className=\"container form\" style={{marginTop: \"20px\"}}>\r\n      <div className= \"row\">\r\n          <div className= \"col-lg-6\">\r\n\r\n            {/* To get the max weight of the knapsack */}\r\n                <input type=\"number\" placeholder=\"Weight of Knapsack\" onChange= {e=> handleWeight(e)}></input>\r\n\r\n                <br></br>\r\n\r\n                <button type=\"button\" className=\"btn btn-primary addbtn\" onClick={() => handleAdd()}>\r\n                Add Item\r\n                </button>\r\n        \r\n                {fields.map((field, idx) => {\r\n                return (\r\n                    <div key={`${field}-${idx}`} className= \"inputs\">\r\n                    <input\r\n                        type=\"number\" \r\n                        value={field.value1} \r\n                        placeholder=\"Enter Profit\" \r\n                        onChange={e => handleChangeValue1(idx, e)}\r\n                    />\r\n                    <input style={{marginLeft: \"10px\"}}\r\n                        type=\"number\" \r\n                        value={field.value2} \r\n                        placeholder=\"Enter Weight\" \r\n                        onChange={e => handleChangeValue2(idx, e)}\r\n                    />\r\n                    <button type=\"button\" className= \"btn btn-primary removebtn\" onClick={() => handleRemove(idx)}>\r\n                        Remove item\r\n                    </button>\r\n                    </div>\r\n                );\r\n                })}\r\n                <br></br>\r\n\r\n                {/* Get the Solution button */}\r\n                <button \r\n                className=\"btn btn-primary\" \r\n                style={{marginTop: \"10px\", backgroundColor: \"#263145\"}}\r\n                onClick={() => getSolution()}\r\n                >\r\n                Get Solution\r\n                </button>\r\n          </div>\r\n\r\n          <div className= \"col-lg-6\">\r\n          {/* Rendering solution component based on the value of solution variable */}\r\n          {solution ?\r\n           <Solution \r\n            maxWeight = {maxW}\r\n            mainData = {[...fields]}\r\n            />\r\n          : null}\r\n\r\n          </div>\r\n      </div>\r\n  \r\n        \r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SolutionKnapsack;","import React from \"react\";\r\nimport data from \"../data/card-data\";\r\nimport SolutionKnapsack from \"./main\";\r\n\r\nfunction Knapsack(){\r\n    return(\r\n        <div>\r\n            <div className= \"container\">\r\n            <h1 className=\"problem-heading\">Knapsack Problem</h1>\r\n            <h3 style={{marginTop: \"20px\" , fontWeight: \"550\"}}>Time Complexity : O(NlogN)</h3>\r\n            <p className= \"problem-desc\">{data[0].description}</p>\r\n            </div>\r\n            <SolutionKnapsack />\r\n        </div>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nexport default Knapsack;","import React from \"react\";\r\n\r\nfunction Solution(props){\r\n\r\n    let dataArray= [...props.mainData];\r\n\r\n    for(let i=0;i<dataArray.length;i++){\r\n\r\n        dataArray[i].starttime= parseInt(dataArray[i].starttime);\r\n        \r\n        dataArray[i].endtime= parseInt(dataArray[i].endtime);\r\n    }\r\n    \r\n    dataArray.sort((a,b) => (a.endtime > b.endtime) ? 1 : -1);\r\n    // console.log(dataArray);\r\n\r\n    let total_activities= 1;\r\n    let ans= [];\r\n\r\n\r\n    function getSolution(){\r\n\r\n        let k=0;\r\n        ans.push(dataArray[0]);\r\n        \r\n        for(let i=1; i<dataArray.length; i++){\r\n\r\n            let endtime= dataArray[k].endtime;\r\n\r\n            if( dataArray[i].starttime >= endtime){\r\n                k=i;\r\n                ans.push(dataArray[i]);\r\n                total_activities++;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h2 style={{borderBottom : \"1px solid black\"}}>Solution : </h2>\r\n            {getSolution()}\r\n\r\n            <h3>Maximum Activities possible : {total_activities}</h3>\r\n            <h3>Activities : </h3>\r\n            <br></br>\r\n            {ans.map(activity => <h4>Time : {activity.starttime} to {activity.endtime}</h4>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Solution;","import React, {useState} from \"react\";\r\nimport Solution from \"./solution\"\r\n\r\nfunction SolutionActivity(){\r\n\r\n    const [fields, setFields] = useState([{ starttime: null, endtime: null }]);\r\n    const [solution, setSolution]= useState(false);\r\n  \r\n\r\n    function handleChangeStart(i, event) {\r\n      const values = [...fields];\r\n      values[i].starttime = event.target.value;\r\n      setFields(values);\r\n    }\r\n\r\n    function handleChangeEnd(i, event){\r\n        const values = [...fields];\r\n        values[i].endtime = event.target.value;\r\n        setFields(values);\r\n    }\r\n  \r\n    function handleAdd() {\r\n      const values = [...fields];\r\n      values.push({ starttime: null, endtime: null });\r\n      setFields(values);\r\n    }\r\n  \r\n    function handleRemove(i) {\r\n      const values = [...fields];\r\n      values.splice(i, 1);\r\n      setFields(values);\r\n    }\r\n\r\n    function getSolution(){\r\n                \r\n        setSolution(true);\r\n    }\r\n\r\n  \r\n  \r\n    return (\r\n\r\n      <div className=\"container form\" style={{marginTop: \"20px\"}}>\r\n      <div className= \"row\">\r\n          <div className= \"col-lg-6\">\r\n\r\n                <br></br>\r\n\r\n                <h3>Input in 24H format</h3>\r\n                <h3>Ex - 1:00pm is 13</h3>\r\n\r\n                <button type=\"button\" className=\"btn btn-primary addbtn\" onClick={() => handleAdd()}>\r\n                Add Activity\r\n                </button>\r\n        \r\n                {fields.map((field, idx) => {\r\n                return (\r\n                    <div key={`${field}-${idx}`} className= \"inputs\">\r\n                    <input\r\n                        type=\"number\" \r\n                        value={field.value1} \r\n                        placeholder=\"Start Time (Integer)\" \r\n                        onChange={e => handleChangeStart(idx, e)}\r\n                    />\r\n                    <input style={{marginLeft: \"10px\"}}\r\n                        type=\"number\" \r\n                        value={field.value2} \r\n                        placeholder=\"End time (Integer)\" \r\n                        onChange={e => handleChangeEnd(idx, e)}\r\n                    />\r\n                    <button type=\"button\" className= \"btn btn-primary removebtn\" onClick={() => handleRemove(idx)}>\r\n                        Remove Activity\r\n                    </button>\r\n                    </div>\r\n                );\r\n                })}\r\n                <br></br>\r\n\r\n                {/* Get the Solution button */}\r\n                <button \r\n                className=\"btn btn-primary\" \r\n                style={{marginTop: \"10px\", backgroundColor: \"#263145\"}}\r\n                onClick={() => getSolution()}\r\n                >\r\n                Get Solution\r\n                </button>\r\n          </div>\r\n\r\n          <div className= \"col-lg-6\">\r\n          {/* Rendering solution component based on the value of solution variable */}\r\n          {solution ?\r\n           <Solution \r\n            mainData = {[...fields]}\r\n            />\r\n          : null}\r\n\r\n          </div>\r\n      </div>\r\n  \r\n        \r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SolutionActivity;","import React from \"react\";\r\nimport data from \"../data/card-data\";\r\nimport SolutionActivity from \"./main\";\r\n\r\nfunction TaskSchedule(){\r\n    return(\r\n        <div>\r\n        <div className= \"container\">\r\n        <h1 className=\"problem-heading\">Task Scheduling / Activity Selection Problem</h1>\r\n        <h3 style={{marginTop: \"20px\" , fontWeight: \"550\"}}>Time Complexity : O(NlogN) - Unsorted Inputs</h3>\r\n        <p className= \"problem-desc\">{data[3].description}</p>\r\n        <SolutionActivity />\r\n        </div>\r\n    </div>\r\n      \r\n    )\r\n}\r\n\r\nexport default TaskSchedule;","import React , { useEffect, useRef } from \"react\";\r\nimport { DataSet, Network} from 'vis-network/standalone/esm/vis-network';\r\n\r\nfunction Graph(props){\r\n\r\n    const domNode = useRef(null);\r\n\r\n    // A reference to the vis network instance\r\n    const network = useRef(null);\r\n\r\n// Node Data\r\n    const tempNode=[];\r\n    for(let i=0;i<props.n;i++){\r\n        let obj= {id: i, label: \"Node \"+i}\r\n        tempNode.push(obj)\r\n    }\r\n\r\n    const nodes= new DataSet([...tempNode]);\r\n\r\n// Edge Data\r\n    const tempEdges=[];\r\n    (props.data).forEach(d => {\r\n        let obj= {from : d[0], to: d[1]};\r\n        tempEdges.push(obj);\r\n    });\r\n    \r\n    const edges= new DataSet([...tempEdges]);\r\n\r\n\r\n    const data = {\r\n        nodes: nodes,\r\n        edges: edges\r\n      };\r\n      const options = {};\r\n\r\n\r\n        useEffect(\r\n        () => {\r\n        network.current = new Network(domNode.current, data, options);\r\n        },\r\n        [domNode, network, data, options]\r\n    );\r\n\r\n    return (\r\n        \r\n        <div className= \"canvas\">\r\n            <div ref = { domNode } style={{height: \"370px\" , border :\"1px solid black\", borderRadius: \"10px\"}} />\r\n            <br></br>\r\n\r\n        </div>\r\n        \r\n\r\n        \r\n        \r\n    );\r\n}\r\n\r\nexport default Graph;","import React from \"react\";\r\nimport Graph from \"./graph\";\r\n\r\n\r\nfunction Solution(props){\r\n\r\n    var graph= props.mainData;\r\n    \r\n    function createAdjMatrix(V) {\r\n  \r\n        var adjMatrix = [];\r\n        \r\n        // create N x N matrix filled with 0 edge weights between all vertices\r\n        for (var i = 0; i < V; i++) { \r\n          adjMatrix.push([]);\r\n          for (var j = 0; j < V; j++) { adjMatrix[i].push(0); }\r\n        }\r\n        \r\n        // populate adjacency matrix with correct edge weights\r\n        for (var i = 0; i < graph.length; i++) { \r\n          adjMatrix[graph[i].startNode][graph[i].endNode] = graph[i].edgeWeight;\r\n          adjMatrix[graph[i].endNode][graph[i].startNode] = graph[i].edgeWeight;\r\n        }\r\n        \r\n        return adjMatrix;\r\n        \r\n      }\r\n      \r\n      function prims(V) {\r\n        \r\n        // create adj matrix from graph\r\n        var adjMatrix = createAdjMatrix(V);\r\n        \r\n        // arbitrarily choose initial vertex from graph\r\n        var vertex = 0;\r\n        \r\n        // initialize empty edges array and empty MST\r\n        var MST = [];\r\n        var edges = [];\r\n        var visited = [];\r\n        var minEdge = [null,null,Infinity];\r\n        \r\n        // run prims algorithm until we create an MST\r\n        // that contains every vertex from the graph\r\n        while (MST.length !== V-1) {\r\n          \r\n          // mark this vertex as visited\r\n          visited.push(vertex);\r\n          \r\n          // add each edge to list of potential edges\r\n          for (var r = 0; r < V; r++) {\r\n            if (adjMatrix[vertex][r] !== 0) { \r\n              edges.push([vertex,r,adjMatrix[vertex][r]]); \r\n            }\r\n          }\r\n      \r\n          // find edge with the smallest weight to a vertex\r\n          // that has not yet been visited\r\n          for (var e = 0; e < edges.length; e++) {\r\n            if (edges[e][2] < minEdge[2] && visited.indexOf(edges[e][1]) === -1) { \r\n              minEdge = edges[e]; \r\n            }\r\n          }\r\n      \r\n          // remove min weight edge from list of edges\r\n          edges.splice(edges.indexOf(minEdge), 1);\r\n      \r\n          // push min edge to MST\r\n          MST.push(minEdge);\r\n            \r\n          // start at new vertex and reset min edge\r\n          vertex = minEdge[1];\r\n          minEdge = [null,null,Infinity];\r\n          \r\n        }\r\n        \r\n        return MST;\r\n        \r\n      }\r\n    \r\n// Function call to get the solution\r\n      var nodeCount= parseInt(props.nodeCount)\r\n      var solutionArray= (prims(nodeCount));\r\n\r\n      function printSolution(ans){\r\n          return (\r\n              <h4>\r\n                Node {ans[0]} to {ans[1]} having edge weight {ans[2]}\r\n              </h4>\r\n          )\r\n      }\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h2>Solution :</h2>\r\n            <br></br>\r\n            <h3>Number of Nodes : {props.nodeCount}</h3>\r\n            <h3>Minimum spanning tree has the following nodes: </h3>\r\n            <br></br>\r\n            {solutionArray.map(printSolution)}\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <Graph\r\n              \r\n              data= {solutionArray}\r\n              n= {props.nodeCount}\r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Solution;","import React, {useState} from \"react\";\r\nimport Solution from \"./solution\";\r\n\r\nfunction SolutionMST(){\r\n\r\n    const [fields, setFields] = useState([{ startNode: null, endNode: null, edgeWeight: null}]);\r\n    const [solution, setSolution]= useState(false);\r\n    const [numberOfNodes, setNumber]= useState(1);\r\n  \r\n\r\n    function handleStartNode(i, event) {\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n        \r\n      const values = [...fields];\r\n      values[i].startNode = event.target.value;\r\n      setFields(values);\r\n    }\r\n\r\n    function handleEndNode(i, event){\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n\r\n        const values = [...fields];\r\n        values[i].endNode = event.target.value;\r\n        setFields(values);\r\n    }\r\n\r\n    function handleEdgeWeight(i, event){\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n\r\n        const values = [...fields];\r\n        values[i].edgeWeight = event.target.value;\r\n        setFields(values);\r\n    }\r\n\r\n    function handleNumberOfNode(event){\r\n\r\n        \r\n        const number= event.target.value;\r\n\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n\r\n         if(number===null){\r\n             setNumber(0);\r\n         } else{\r\n            setNumber(number);\r\n\r\n         }\r\n    }\r\n  \r\n    function handleAdd() {\r\n      const values = [...fields];\r\n      values.push({ startNode: null, endNode: null });\r\n      setFields(values);\r\n    }\r\n  \r\n    function handleRemove(i) {\r\n      const values = [...fields];\r\n      values.splice(i, 1);\r\n      setFields(values);\r\n    }\r\n\r\n    function getSolution(){\r\n                \r\n        setSolution(true);\r\n    }\r\n\r\n  \r\n    return (\r\n\r\n      <div className=\"container form\" style={{marginTop: \"20px\"}}>\r\n      <div className= \"row\">\r\n          <div className= \"col-lg-6\">\r\n\r\n                <br></br>\r\n\r\n            \r\n                <h3>Number of Nodes</h3>\r\n\r\n                <input\r\n                    style={{marginTop: \"10px\"}}\r\n                    type=\"number\"\r\n                    value= {numberOfNodes}\r\n                    placeholder= \"Number of Nodes\"\r\n                    onChange= {e => handleNumberOfNode(e)}\r\n                ></input>\r\n\r\n                <h3>Valid Node Labels: 0 to {numberOfNodes-1}</h3>\r\n\r\n                <button type=\"button\" className=\"btn btn-primary addbtn\" onClick={() => handleAdd()}>\r\n                Add Node Relation\r\n                </button>\r\n        \r\n                {fields.map((field, idx) => {\r\n                return (\r\n                    <div key={`${field}-${idx}`} className= \"inputs\">\r\n                    <input\r\n                        type=\"number\" \r\n                        value={field.startNode} \r\n                        placeholder=\"Start Node\" \r\n                        onChange={e => handleStartNode(idx, e)}\r\n                    />\r\n                    <input style={{marginLeft: \"10px\"}}\r\n                        type=\"number\" \r\n                        value={field.endNode} \r\n                        placeholder=\"End Node\" \r\n                        onChange={e => handleEndNode(idx, e)}\r\n                    />\r\n                    <input style={{marginLeft: \"5px\"}}\r\n                        type=\"number\" \r\n                        value={field.edgeWeight} \r\n                        placeholder=\"Edge Weight\" \r\n                        onChange={e => handleEdgeWeight(idx, e)}\r\n                    />\r\n\r\n                    <button type=\"button\" className= \"btn btn-primary removebtn\" onClick={() => handleRemove(idx)}>\r\n                        Delete \r\n                    </button>\r\n                    </div>\r\n                );\r\n                })}\r\n                <br></br>\r\n\r\n                {/* Get the Solution button */}\r\n                <button \r\n                className=\"btn btn-primary\" \r\n                style={{marginTop: \"10px\", backgroundColor: \"#263145\"}}\r\n                onClick={() => getSolution()}\r\n                >\r\n                Get Solution\r\n                </button>\r\n          </div>\r\n\r\n          <div className= \"col-lg-6\">\r\n          {/* Rendering solution component based on the value of solution variable */}\r\n          {solution ?\r\n           <Solution \r\n            mainData = {[...fields]}\r\n            nodeCount= {numberOfNodes}\r\n            />\r\n          : null}\r\n\r\n          </div>\r\n      </div>\r\n  \r\n        \r\n      </div>\r\n    );\r\n}\r\n\r\nexport default SolutionMST;","import React from \"react\";\r\nimport data from \"../data/card-data\";\r\nimport SolutionMSt from \"./main\";\r\n\r\nfunction MST(){\r\n    return(\r\n        <div>\r\n            <div className= \"container\">\r\n            <h1 className=\"problem-heading\">Minimum Cost Spanning Tree</h1>\r\n            <h3 style={{marginTop: \"20px\" , fontWeight: \"550\"}}>Time Complexity : O( (V+E) logV)</h3>\r\n            <p className= \"problem-desc\">{data[1].description} The algorithm used is Prim's Algorithm to calculate the minimum cost spanning tree.</p>\r\n\r\n            <p className= \"problem-desc\"><b>Instructions:</b> For undirected edge between Node 1 and Node 2 , <b>Fill only in one of the inputs.</b>.</p>\r\n            </div>\r\n            <SolutionMSt />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MST;","import React from \"react\";\r\n\r\nfunction Solution(props){\r\n\r\n\r\n    function HuffmanEncoding(str) {\r\n        this.str = str;\r\n     \r\n        var count_chars = {};\r\n        for (var i = 0; i < str.length; i++) \r\n            if (str[i] in count_chars) \r\n                count_chars[str[i]] ++;\r\n            else \r\n                count_chars[str[i]] = 1;\r\n     \r\n        var pq = new BinaryHeap(function(x){return x[0];});\r\n        for (var ch in count_chars) \r\n            pq.push([count_chars[ch], ch]);\r\n     \r\n        while (pq.size() > 1) {\r\n            var pair1 = pq.pop();\r\n            var pair2 = pq.pop();\r\n            pq.push([pair1[0]+pair2[0], [pair1[1], pair2[1]]]);\r\n        }\r\n     \r\n        var tree = pq.pop();\r\n        this.encoding = {};\r\n        this._generate_encoding(tree[1], \"\");\r\n     \r\n        this.encoded_string = \"\"\r\n        let counter= 0;\r\n        for (var i = 0; i < this.str.length; i++) {\r\n\r\n          if(counter>=10){\r\n            counter=0;\r\n            this.encoded_string+= \"\\n\";\r\n          }\r\n            this.encoded_string += this.encoding[str[i]];\r\n            counter++;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    HuffmanEncoding.prototype._generate_encoding = function(ary, prefix) {\r\n        if (ary instanceof Array) {\r\n            this._generate_encoding(ary[0], prefix + \"0\");\r\n            this._generate_encoding(ary[1], prefix + \"1\");\r\n        }\r\n        else {\r\n            this.encoding[ary] = prefix;\r\n        }\r\n    }\r\n\r\n    let individualcodes= [];\r\n     \r\n    HuffmanEncoding.prototype.inspect_encoding = function() {\r\n        for (var ch in this.encoding) {\r\n\r\n            let sample= \"\";\r\n            if(ch===\" \"){\r\n                 sample= \"Space\" + \" : \" + this.encoding[ch]\r\n            }else if(ch===\"\\n\"){\r\n                sample= \"Enter\" + \" : \" + this.encoding[ch]\r\n            }\r\n            else{\r\n                 sample=  ch + \" : \" + this.encoding[ch];\r\n            }\r\n            \r\n            individualcodes.push(sample);\r\n        }\r\n    }\r\n\r\n\r\n// Binary heap implementation\r\n    function BinaryHeap(scoreFunction){\r\n        this.content = [];\r\n        this.scoreFunction = scoreFunction;\r\n      }\r\n      \r\n      BinaryHeap.prototype = {\r\n        push: function(element) {\r\n          // Add the new element to the end of the array.\r\n          this.content.push(element);\r\n          // Allow it to bubble up.\r\n          this.bubbleUp(this.content.length - 1);\r\n        },\r\n      \r\n        pop: function() {\r\n          // Store the first element so we can return it later.\r\n          var result = this.content[0];\r\n          // Get the element at the end of the array.\r\n          var end = this.content.pop();\r\n          // If there are any elements left, put the end element at the\r\n          // start, and let it sink down.\r\n          if (this.content.length > 0) {\r\n            this.content[0] = end;\r\n            this.sinkDown(0);\r\n          }\r\n          return result;\r\n        },\r\n      \r\n        remove: function(node) {\r\n          var length = this.content.length;\r\n          // To remove a value, we must search through the array to find\r\n          // it.\r\n          for (var i = 0; i < length; i++) {\r\n            if (this.content[i] != node) continue;\r\n            // When it is found, the process seen in 'pop' is repeated\r\n            // to fill up the hole.\r\n            var end = this.content.pop();\r\n            // If the element we popped was the one we needed to remove,\r\n            // we're done.\r\n            if (i === length - 1) break;\r\n            // Otherwise, we replace the removed element with the popped\r\n            // one, and allow it to float up or sink down as appropriate.\r\n            this.content[i] = end;\r\n            this.bubbleUp(i);\r\n            this.sinkDown(i);\r\n            break;\r\n          }\r\n        },\r\n      \r\n        size: function() {\r\n          return this.content.length;\r\n        },\r\n      \r\n        bubbleUp: function(n) {\r\n          // Fetch the element that has to be moved.\r\n          var element = this.content[n], score = this.scoreFunction(element);\r\n          // When at 0, an element can not go up any further.\r\n          while (n > 0) {\r\n            // Compute the parent element's index, and fetch it.\r\n            var parentN = Math.floor((n + 1) / 2) - 1,\r\n            parent = this.content[parentN];\r\n            // If the parent has a lesser score, things are in order and we\r\n            // are done.\r\n            if (score >= this.scoreFunction(parent))\r\n              break;\r\n      \r\n            // Otherwise, swap the parent with the current element and\r\n            // continue.\r\n            this.content[parentN] = element;\r\n            this.content[n] = parent;\r\n            n = parentN;\r\n          }\r\n        },\r\n      \r\n        sinkDown: function(n) {\r\n          // Look up the target element and its score.\r\n          var length = this.content.length,\r\n          element = this.content[n],\r\n          elemScore = this.scoreFunction(element);\r\n      \r\n          while(true) {\r\n            // Compute the indices of the child elements.\r\n            var child2N = (n + 1) * 2, child1N = child2N - 1;\r\n            // This is used to store the new position of the element,\r\n            // if any.\r\n            var swap = null;\r\n            // If the first child exists (is inside the array)...\r\n            if (child1N < length) {\r\n              // Look it up and compute its score.\r\n              var child1 = this.content[child1N],\r\n              child1Score = this.scoreFunction(child1);\r\n              // If the score is less than our element's, we need to swap.\r\n              if (child1Score < elemScore)\r\n                swap = child1N;\r\n            }\r\n            // Do the same checks for the other child.\r\n            if (child2N < length) {\r\n              var child2 = this.content[child2N],\r\n              child2Score = this.scoreFunction(child2);\r\n              if (child2Score < (swap == null ? elemScore : child1Score))\r\n                swap = child2N;\r\n            }\r\n      \r\n            // No need to swap further, we are done.\r\n            if (swap === null) break;\r\n      \r\n            // Otherwise, swap and continue.\r\n            this.content[n] = this.content[swap];\r\n            this.content[swap] = element;\r\n            n = swap;\r\n          }\r\n        }\r\n      };\r\n\r\n\r\n      var huff = new HuffmanEncoding(props.data);\r\n\r\n      function getCode(){\r\n        \r\n        huff.inspect_encoding();\r\n      }\r\n\r\n\r\n      function printcodes(letterCode){\r\n          return(\r\n              <h4>{letterCode}</h4>\r\n          )\r\n      }\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h3><b>Original text: </b> {props.data} </h3>\r\n\r\n            <br></br>\r\n            \r\n            \r\n              <h3><b>Code : </b> {huff.encoded_string}</h3>\r\n            \r\n            \r\n            {getCode()}\r\n            <br></br>\r\n            <h3><b>Character codes : </b> </h3>\r\n            <br></br>\r\n            {individualcodes.map(printcodes)}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Solution;","import React, {useState} from \"react\";\r\nimport Solution from \"./solution\";\r\n\r\n\r\nfunction SolutionHuffmann(){\r\n\r\n    const [text, setText]= useState(null);\r\n    const [solution, setSolution]= useState(false);\r\n    \r\n    function handleTextChange(event) {\r\n        \r\n        const newtext= event.target.value;\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n            setText(newtext);\r\n\r\n    }\r\n\r\n    function getSolution(e){\r\n\r\n        setSolution(!solution);\r\n    }\r\n\r\n    return(\r\n        \r\n            <div className= \"container gettext\">\r\n            <div className= \"row\">\r\n                <div className= \"col-lg-6\">\r\n                <h2>Enter text to encode : </h2>\r\n                    <textarea \r\n                        id=\"userText\" \r\n                        rows=\"4\" \r\n                        cols=\"50\"\r\n                        value= {text}\r\n                        onChange= {e => handleTextChange(e)}\r\n                    >\r\n                    </textarea>\r\n\r\n                    <p></p>\r\n                    <button \r\n                        className=\"btn btn-primary\" \r\n                        style={{marginTop: \"10px\", backgroundColor: \"#263145\"}}\r\n                        onClick={() => getSolution()}\r\n                        >\r\n                        Encode\r\n                    </button>\r\n                      \r\n\r\n                </div>\r\n\r\n                <div className= \"col-lg-6\">\r\n                    {/* Rendering solution component based on the value of solution variable */}\r\n                        {solution ?\r\n                        <Solution \r\n                            data = {text}\r\n                        />\r\n                        : null}\r\n                </div>\r\n\r\n                \r\n                \r\n            </div>\r\n\r\n\r\n            \r\n\r\n            </div>\r\n   \r\n        \r\n        \r\n    )\r\n}\r\n\r\nexport default SolutionHuffmann;","import React from \"react\";\r\nimport data from \"../data/card-data\";\r\nimport SolutionHuffmann from \"./main\";\r\n\r\nfunction Huffmann(){\r\n    return(\r\n        <div>\r\n            <div className= \"container\">\r\n            <h1 className=\"problem-heading\">Huffmann encoding</h1>\r\n            <h3 style={{marginTop: \"20px\" , fontWeight: \"550\"}}>Time Complexity : O(NlogN)</h3>\r\n            <p className= \"problem-desc\">{data[2].description}</p>\r\n            </div>\r\n\r\n            <SolutionHuffmann />\r\n\r\n        </div>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nexport default Huffmann;","import React from \"react\";\r\nimport jsgraphs from \"js-graph-algorithms\";\r\n\r\nfunction DijkstraSolution(props){\r\n\r\n    let numberOfNodes= parseInt(props.nodeCount);\r\n\r\n\r\n\r\n    var g = new jsgraphs.WeightedDiGraph(numberOfNodes);\r\n\r\n\r\n    (props.mainData).forEach(NodeRelation => {\r\n        \r\n        let start= parseInt(NodeRelation.startNode);\r\n        let end= parseInt(NodeRelation.endNode);\r\n        let cost= parseInt(NodeRelation.cost);\r\n\r\n\r\n        // Creation of Edge\r\n        g.addEdge(new jsgraphs.Edge(start, end, cost));\r\n    });\r\n\r\n\r\n\r\n    let source= parseInt(props.data[0].source);\r\n    let dest= parseInt(props.data[0].destination);\r\n\r\n\r\n    // Start Node for algorithm\r\n    var dijkstra = new jsgraphs.Dijkstra(g, source);\r\n\r\n    // End Node\r\n    var v= dest;\r\n    var path;\r\n\r\n\r\n    if(dijkstra.hasPathTo(v)){\r\n        path= dijkstra.pathTo(v);\r\n    }\r\n\r\n    function printPath(p){\r\n\r\n        return(\r\n            <h4>{p.from()}  ➜  {p.to()} : Cost= {p.weight}</h4>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <div style={{marginTop: \"10px\"}}>\r\n\r\n                <h3>Source Node : {source}</h3>\r\n                <h3>Destination Node : {dest}</h3>\r\n\r\n            </div>\r\n            <br></br>\r\n            <h3><b>Path : </b> </h3>\r\n\r\n            {dijkstra.hasPathTo(v) ? path.map(printPath) : <h4>No Path Found</h4>}\r\n            {dijkstra.hasPathTo(v) ? <h4><b>Total Cost : </b>  {dijkstra.distanceTo(v)}</h4>: null}\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DijkstraSolution;","import React, {useState} from \"react\";\r\nimport DijkstraSolution from \"./solution\";\r\n\r\n\r\nfunction Solution(){\r\n\r\n    const [fields, setFields] = useState([{ startNode: null, endNode: null, cost: null}]);\r\n    const [solution, setSolution]= useState(false);\r\n    const [numberOfNodes, setNumber]= useState(null);\r\n    // For source and destination nodes\r\n    const [algoData, setAlgoData]= useState([{source: null, destination: null}])\r\n  \r\n\r\n    function handleStartNode(i, event) {\r\n\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n      const values = [...fields];\r\n      values[i].startNode = event.target.value;\r\n      setFields(values);\r\n    }\r\n\r\n    function handleEndNode(i, event){\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n        const values = [...fields];\r\n        values[i].endNode = event.target.value;\r\n        setFields(values);\r\n    }\r\n\r\n    function handleEdgeWeight(i, event){\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n        const values = [...fields];\r\n        values[i].cost = event.target.value;\r\n        setFields(values);\r\n    }\r\n\r\n    function handleNumberOfNode(event){\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n\r\n        const number= event.target.value;\r\n\r\n        setNumber(number);\r\n\r\n         \r\n    }\r\n\r\n    function handleSource(event){\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n\r\n        const values = [...algoData];\r\n        values[0].source = event.target.value;\r\n        setAlgoData(values);\r\n    }\r\n\r\n    function handleDestination(event){\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n        const values = [...algoData];\r\n        values[0].destination = event.target.value;\r\n        setAlgoData(values);\r\n    }\r\n  \r\n    function handleAdd() {\r\n      const values = [...fields];\r\n      values.push({ startNode: null, endNode: null });\r\n      setFields(values);\r\n    }\r\n  \r\n    function handleRemove(i) {\r\n      const values = [...fields];\r\n      values.splice(i, 1);\r\n      setFields(values);\r\n    }\r\n\r\n    function getSolution(){\r\n                \r\n        setSolution(true);\r\n    }\r\n\r\n  \r\n    return (\r\n\r\n      <div className=\"container form\" style={{marginTop: \"20px\"}}>\r\n      <div className= \"row\">\r\n          <div className= \"col-lg-6\">\r\n\r\n                <br></br>\r\n\r\n               \r\n\r\n                <input\r\n                    style={{marginTop: \"10px\"}}\r\n                    type=\"number\"\r\n                    value= {numberOfNodes}\r\n                    placeholder= \"Number of Nodes\"\r\n                    onChange= {e => handleNumberOfNode(e)}\r\n                ></input>\r\n                <br></br>\r\n\r\n                <input\r\n                    style={{marginTop: \"10px\"}}\r\n                    type=\"number\"\r\n                    value= {algoData.source}\r\n                    placeholder= \"Source Node\"\r\n                    onChange= {e => handleSource(e)}\r\n                ></input>\r\n                <input\r\n                    style={{marginLeft: \"8px\", marginTop: \"10px\"}}\r\n                    type=\"number\"\r\n                    value= {algoData.destination}\r\n                    placeholder= \"Destination Node\"\r\n                    onChange= {e => handleDestination(e)}\r\n                ></input>\r\n\r\n\r\n                <h2>Valid node Labels: 0 to {numberOfNodes-1}</h2>\r\n\r\n                <button type=\"button\" className=\"btn btn-primary addbtn\" onClick={() => handleAdd()}>\r\n                Add Node Relation\r\n                </button>\r\n        \r\n                {fields.map((field, idx) => {\r\n                return (\r\n                    <div key={`${field}-${idx}`} className= \"inputs\">\r\n                    <input\r\n                        type=\"number\" \r\n                        value={field.startNode} \r\n                        placeholder=\"Start Node\" \r\n                        onChange={e => handleStartNode(idx, e)}\r\n                    />\r\n                    <input style={{marginLeft: \"10px\"}}\r\n                        type=\"number\" \r\n                        value={field.endNode} \r\n                        placeholder=\"End Node\" \r\n                        onChange={e => handleEndNode(idx, e)}\r\n                    />\r\n                    <input style={{marginLeft: \"5px\"}}\r\n                        type=\"number\" \r\n                        value={field.cost} \r\n                        placeholder=\"Cost\" \r\n                        onChange={e => handleEdgeWeight(idx, e)}\r\n                    />\r\n\r\n                    <button type=\"button\" className= \"btn btn-primary removebtn\" onClick={() => handleRemove(idx)}>\r\n                        Delete \r\n                    </button>\r\n                    </div>\r\n                );\r\n                })}\r\n                <br></br>\r\n\r\n                {/* Get the Solution button */}\r\n                <button \r\n                className=\"btn btn-primary\" \r\n                style={{marginTop: \"10px\", backgroundColor: \"#263145\"}}\r\n                onClick={() => getSolution()}\r\n                >\r\n                Get Solution\r\n                </button>\r\n          </div>\r\n\r\n          <div className= \"col-lg-6\">\r\n            {/* Rendering solution component based on the value of solution variable */}\r\n            {solution ?\r\n            <DijkstraSolution \r\n                mainData = {[...fields]}\r\n                nodeCount= {numberOfNodes}\r\n                data= {[...algoData]}\r\n                />\r\n            : null}\r\n\r\n          </div>\r\n      </div>\r\n  \r\n        \r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Solution;","import React from \"react\";\r\nimport data from \"../data/card-data\";\r\nimport Solution from  \"./main\";\r\nimport SolutionHuffmann from \"../Huffmann/main\";\r\n\r\nfunction Dijkstra(){\r\n    return(\r\n        <div>\r\n            <div className= \"container\">\r\n            <h1 className=\"problem-heading\">Single Source Shortest Path</h1>\r\n            <h3 style={{marginTop: \"20px\" , fontWeight: \"550\"}}>Time Complexity : O((V+E) logV)</h3>\r\n            <p className= \"problem-desc\">{data[4].description}</p>\r\n            </div>\r\n\r\n            <Solution />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dijkstra;","import React from \"react\";\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nfunction KnapChart(){\r\n\r\n\r\n    var chartData= {\r\n        labels: [\"n=40000\", \"n=120000\", \"n=240000\", \"n=480000\"],\r\n        datasets: [{\r\n        label: \"Fractional Knapsack - O(N logN)\",\r\n        fill: false,\r\n        backgroundColor: '#f6376d',\r\n        borderColor: '#f6376d',\r\n        data: [0.001, 0.002,0.0025,0.004],\r\n        }],\r\n    }\r\n\r\n    var chartOptions=  {\r\n        legend: {\r\n          labels:{\r\n            fontColor: \"black\",\r\n            fontSize: 16\r\n          }\r\n        },\r\n          scales: {\r\n              yAxes: [{\r\n                  ticks: {\r\n                    fontColor: \"black\",\r\n                      beginAtZero: true\r\n                  },\r\n                  scaleLabel: {\r\n                    display: true,\r\n                    labelString: \"Time\"\r\n                  }\r\n              }],\r\n              xAxes: [{\r\n                ticks: {\r\n                  fontColor: \"black\",\r\n                  beginAtZero: true\r\n                },\r\n                scaleLabel: {\r\n                    display: true,\r\n                    labelString: \"Input Size\"\r\n                  }\r\n              }]\r\n          }\r\n      }\r\n    return(\r\n        <div>\r\n            <Line \r\n               data={chartData}\r\n               options={chartOptions} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default KnapChart;","import React from \"react\";\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n\r\nfunction TaskChart(){\r\n    var chartData= {\r\n        labels: [\"n=40000\", \"n=120000\", \"n=240000\", \"n=480000\"],\r\n        datasets: [{\r\n        label: \"Activity Selection - O(N logN)\",\r\n        fill: false,\r\n        backgroundColor: '#263145',\r\n        borderColor: '#263145',\r\n        data: [0.0015, 0.0021,0.0032,0.0042],\r\n        }],\r\n    }\r\n\r\n    var chartOptions=  {\r\n        legend: {\r\n          labels:{\r\n            fontColor: \"black\",\r\n            fontSize: 16\r\n          }\r\n        },\r\n          scales: {\r\n              yAxes: [{\r\n                  ticks: {\r\n                    fontColor: \"black\",\r\n                      beginAtZero: true\r\n                  },\r\n                  scaleLabel: {\r\n                    display: true,\r\n                    labelString: \"Time\"\r\n                  }\r\n              }],\r\n              xAxes: [{\r\n                ticks: {\r\n                  fontColor: \"black\",\r\n                  beginAtZero: true\r\n                },\r\n                scaleLabel: {\r\n                    display: true,\r\n                    labelString: \"Input Size\"\r\n                  }\r\n              }]\r\n          }\r\n      }\r\n    return(\r\n        <div>\r\n            <Line \r\n               data={chartData}\r\n               options={chartOptions} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskChart;","import React from \"react\";\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n\r\nfunction PrimChart(){\r\n    var chartData= {\r\n        labels: [\"n\", \"n\", \"n\", \"n\"],\r\n        datasets: [{\r\n        label: \"Minimum Spanning Tree - O((V+E) logV)\",\r\n        fill: false,  \r\n        backgroundColor: '#f6376d',\r\n        borderColor: '#f6376d',\r\n        data: [0.0018, 0.0029,0.0041,0.0056],\r\n        }],\r\n    }\r\n\r\n    var chartOptions=  {\r\n        legend: {\r\n          labels:{\r\n            fontColor: \"black\",\r\n            fontSize: 16\r\n          }\r\n        },\r\n          scales: {\r\n              yAxes: [{\r\n                  ticks: {\r\n                    fontColor: \"black\",\r\n                      beginAtZero: true\r\n                  },\r\n                  scaleLabel: {\r\n                    display: true,\r\n                    labelString: \"Time\"\r\n                  }\r\n              }],\r\n              xAxes: [{\r\n                ticks: {\r\n                  fontColor: \"black\",\r\n                  beginAtZero: true\r\n                },\r\n                scaleLabel: {\r\n                    display: true,\r\n                    labelString: \"Input Size\"\r\n                  }\r\n              }]\r\n          }\r\n      }\r\n    return(\r\n        <div>\r\n            <Line \r\n               data={chartData}\r\n               options={chartOptions} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PrimChart;","import React from \"react\";\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n\r\nfunction DijkstraChart(){\r\n    var chartData= {\r\n        labels: [\"n\", \"n\", \"n\", \"n\"],\r\n        datasets: [{\r\n        label: \"Single Source Shortest Path - O((V+E) logV)\",\r\n        fill: false,\r\n        backgroundColor: '#f6376d',\r\n        borderColor: '#f6376d',\r\n        data: [0.0019, 0.0028,0.0043,0.0058],\r\n        }],\r\n    }\r\n\r\n    var chartOptions=  {\r\n        legend: {\r\n          labels:{\r\n            fontColor: \"black\",\r\n            fontSize: 16\r\n          }\r\n        },\r\n          scales: {\r\n              yAxes: [{\r\n                  ticks: {\r\n                    fontColor: \"black\",\r\n                      beginAtZero: true\r\n                  },\r\n                  scaleLabel: {\r\n                    display: true,\r\n                    labelString: \"Time\"\r\n                  }\r\n              }],\r\n              xAxes: [{\r\n                ticks: {\r\n                  fontColor: \"black\",\r\n                  beginAtZero: true\r\n                },\r\n                scaleLabel: {\r\n                    display: true,\r\n                    labelString: \"Input Size\"\r\n                  }\r\n              }]\r\n          }\r\n      }\r\n    return(\r\n        <div>\r\n            <Line \r\n               data={chartData}\r\n               options={chartOptions} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DijkstraChart;","import React from \"react\";\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n\r\nfunction HuffChart(){\r\n    var chartData= {\r\n        labels: [\"n=20000\", \"n=80000\", \"n=160000\", \"n=320000\"],\r\n        datasets: [{\r\n        label: \"Huffmann Coding - O(N logN)\",\r\n        fill: false,\r\n        backgroundColor: '#263145',\r\n        borderColor: '#263145',\r\n        data: [0.001, 0.0017,0.0025,0.0032],\r\n        }],\r\n    }\r\n\r\n    var chartOptions=  {\r\n        legend: {\r\n          labels:{\r\n            fontColor: \"black\",\r\n            fontSize: 16\r\n          }\r\n        },\r\n          scales: {\r\n              yAxes: [{\r\n                  ticks: {\r\n                    fontColor: \"black\",\r\n                      beginAtZero: true\r\n                  },\r\n                  scaleLabel: {\r\n                    display: true,\r\n                    labelString: \"Time\"\r\n                  }\r\n              }],\r\n              xAxes: [{\r\n                ticks: {\r\n                  fontColor: \"black\",\r\n                  beginAtZero: true\r\n                },\r\n                scaleLabel: {\r\n                    display: true,\r\n                    labelString: \"Input Size\"\r\n                  }\r\n              }]\r\n          }\r\n      }\r\n    return(\r\n        <div>\r\n            <Line \r\n               data={chartData}\r\n               options={chartOptions} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HuffChart;","import React from \"react\";\r\nimport KnapChart from \"./knapChart\";\r\nimport TaskChart from \"./activityChart\";\r\nimport PrimChart from \"./mstChart\";\r\nimport DijkstraChart from \"./DijkstraChart\";\r\nimport HuffChart from \"./huffmann\";\r\n\r\n\r\n\r\n// KnapChart TaskChart PrimChart DijkstraChart HuffChart\r\nfunction Graphs(){\r\n    return(\r\n        <div className=\"container\">\r\n            <h1>Graphical Plots</h1>\r\n            <br></br>\r\n            <div className= \"row\">\r\n                <div className= \"col-md-6\">\r\n                    <KnapChart />\r\n                </div>\r\n                <div className= \"col-md-6\">\r\n                    <TaskChart />\r\n                </div>\r\n            </div>\r\n            <br></br>\r\n\r\n            <div className= \"row\">\r\n                <div className= \"col-md-6\">\r\n                    <HuffChart />\r\n                </div>\r\n                <div className= \"col-md-6\">\r\n                    <PrimChart />\r\n                </div>\r\n            </div>\r\n            <br></br>\r\n\r\n            <div className= \"row\">\r\n                <div className= \"col-md-6\">\r\n                    <DijkstraChart />\r\n                </div>\r\n            </div>\r\n\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graphs;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport Main from \"./Main\";\r\nimport Knapsack from \"../Knapsack/knapsack\";\r\nimport TaskSchedule from \"../TaskScheduling/taskschedule\";\r\nimport MST from \"../MST/mst\";\r\nimport Huffmann from \"../Huffmann/huffmann\";\r\nimport Dijkstra from \"../Dijkstra/dijkstra\";\r\nimport Graphs from \"../plottedGraphs/graphs\";\r\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\r\n\r\nfunction App(){\r\n    return(\r\n        <Router>\r\n            <div className=\"App\">\r\n                <Header />\r\n                <div className=\"container-fluid\">\r\n                <Switch>\r\n                    <Route path=\"/\" exact component= {Main}></Route>\r\n                    <Route path=\"/knapsack\" component= {Knapsack}></Route>\r\n                    <Route path=\"/taskscheduling\" component= {TaskSchedule}></Route>\r\n                    <Route path= \"/mst\" component={MST}></Route>\r\n                    <Route path= \"/huffmann\" component={Huffmann}></Route>\r\n                    <Route path= \"/singlesource\" component= {Dijkstra}></Route>\r\n                    <Route path=\"/graphs\" component= {Graphs}></Route>\r\n                </Switch>\r\n                </div>\r\n               \r\n            </div>\r\n        </Router>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}