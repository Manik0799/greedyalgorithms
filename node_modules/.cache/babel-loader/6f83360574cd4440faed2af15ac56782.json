{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\GreedyAssignment\\\\assignment\\\\src\\\\Dijkstra\\\\solution.js\";\nimport React from \"react\";\nimport jsgraphs from \"js-graph-algorithms\";\n\nfunction DijkstraSolution(props) {\n  let numberOfNodes = parseInt(props.nodeCount); // var g = new jsgraphs.WeightedDiGraph(numberOfNodes);\n  // (props.mainData).forEach(NodeRelation => {\n  //     let start= parseInt(NodeRelation.startNode);\n  //     let end= parseInt(NodeRelation.endNode);\n  //     let cost= parseInt(NodeRelation.cost);\n  //     // Creation of Edge\n  //     g.addEdge(new jsgraphs.Edge(start, end, cost));\n  // });\n\n  let source = parseInt(props.data[0].source);\n  let dest = parseInt(props.data[0].destination);\n  console.log(source + \" \" + dest); //     // Start Node for algorithm\n  //     var dijkstra = new jsgraphs.Dijkstra(g, source);\n  //     // End Node\n  //     var v= dest;\n  //     if(dijkstra.hasPathTo(v)){\n  //         var path = dijkstra.pathTo(v);\n  //         for(var i = 0; i < path.length; ++i) {\n  //             var e = path[i];\n  //             console.log(e.from() + ' => ' + e.to() + ': ' + e.weight);\n  //         }\n  //         console.log('distance: '  + dijkstra.distanceTo(v) );\n  // }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, \"Solution\"));\n}\n\nexport default DijkstraSolution;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/GreedyAssignment/assignment/src/Dijkstra/solution.js"],"names":["React","jsgraphs","DijkstraSolution","props","numberOfNodes","parseInt","nodeCount","source","data","dest","destination","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAgC;AAE5B,MAAIC,aAAa,GAAEC,QAAQ,CAACF,KAAK,CAACG,SAAP,CAA3B,CAF4B,CAM5B;AAGA;AAEA;AACA;AACA;AAGA;AACA;AACA;;AAIA,MAAIC,MAAM,GAAEF,QAAQ,CAACF,KAAK,CAACK,IAAN,CAAW,CAAX,EAAcD,MAAf,CAApB;AACA,MAAIE,IAAI,GAAEJ,QAAQ,CAACF,KAAK,CAACK,IAAN,CAAW,CAAX,EAAcE,WAAf,CAAlB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,GAAE,GAAR,GAAaE,IAAzB,EAzB4B,CA2BhC;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAOI,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ;AAMH;;AAED,eAAeP,gBAAf","sourcesContent":["import React from \"react\";\r\nimport jsgraphs from \"js-graph-algorithms\";\r\n\r\nfunction DijkstraSolution(props){\r\n\r\n    let numberOfNodes= parseInt(props.nodeCount);\r\n\r\n\r\n\r\n    // var g = new jsgraphs.WeightedDiGraph(numberOfNodes);\r\n\r\n\r\n    // (props.mainData).forEach(NodeRelation => {\r\n        \r\n    //     let start= parseInt(NodeRelation.startNode);\r\n    //     let end= parseInt(NodeRelation.endNode);\r\n    //     let cost= parseInt(NodeRelation.cost);\r\n\r\n\r\n    //     // Creation of Edge\r\n    //     g.addEdge(new jsgraphs.Edge(start, end, cost));\r\n    // });\r\n\r\n\r\n\r\n    let source= parseInt(props.data[0].source);\r\n    let dest= parseInt(props.data[0].destination);\r\n\r\n    console.log(source+ \" \"+ dest);\r\n\r\n//     // Start Node for algorithm\r\n//     var dijkstra = new jsgraphs.Dijkstra(g, source);\r\n\r\n//     // End Node\r\n//     var v= dest;\r\n\r\n//     if(dijkstra.hasPathTo(v)){\r\n    \r\n//         var path = dijkstra.pathTo(v);\r\n                \r\n//         for(var i = 0; i < path.length; ++i) {\r\n//             var e = path[i];\r\n//             console.log(e.from() + ' => ' + e.to() + ': ' + e.weight);\r\n//         }\r\n        \r\n//         console.log('distance: '  + dijkstra.distanceTo(v) );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h1>Solution</h1>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DijkstraSolution;"]},"metadata":{},"sourceType":"module"}