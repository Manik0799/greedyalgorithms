{"ast":null,"code":"import React from\"react\";import jsgraphs from\"js-graph-algorithms\";function DijkstraSolution(props){var numberOfNodes=parseInt(props.nodeCount);var g=new jsgraphs.WeightedDiGraph(numberOfNodes);props.mainData.forEach(function(NodeRelation){var start=parseInt(NodeRelation.startNode);var end=parseInt(NodeRelation.endNode);var cost=parseInt(NodeRelation.cost);// Creation of Edge\ng.addEdge(new jsgraphs.Edge(start,end,cost));});var source=parseInt(props.data[0].source);var dest=parseInt(props.data[0].destination);// Start Node for algorithm\nvar dijkstra=new jsgraphs.Dijkstra(g,source);// End Node\nvar v=dest;var path;if(dijkstra.hasPathTo(v)){path=dijkstra.pathTo(v);}function printPath(p){return/*#__PURE__*/React.createElement(\"h4\",null,p.from(),\"  \\u279C  \",p.to(),\" : Cost= \",p.weight);}return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{style:{marginTop:\"10px\"}},/*#__PURE__*/React.createElement(\"h3\",null,\"Source Node : \",source),/*#__PURE__*/React.createElement(\"h3\",null,\"Destination Node : \",dest)),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(\"b\",null,\"Path : \"),\" \"),dijkstra.hasPathTo(v)?path.map(printPath):/*#__PURE__*/React.createElement(\"h4\",null,\"No Path Found\"),dijkstra.hasPathTo(v)?/*#__PURE__*/React.createElement(\"h4\",null,/*#__PURE__*/React.createElement(\"b\",null,\"Total Cost : \"),\"  \",dijkstra.distanceTo(v)):null);}export default DijkstraSolution;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/GreedyAssignment/assignment/src/Dijkstra/solution.js"],"names":["React","jsgraphs","DijkstraSolution","props","numberOfNodes","parseInt","nodeCount","g","WeightedDiGraph","mainData","forEach","NodeRelation","start","startNode","end","endNode","cost","addEdge","Edge","source","data","dest","destination","dijkstra","Dijkstra","v","path","hasPathTo","pathTo","printPath","p","from","to","weight","marginTop","map","distanceTo"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,qBAArB,CAEA,QAASC,CAAAA,gBAAT,CAA0BC,KAA1B,CAAgC,CAE5B,GAAIC,CAAAA,aAAa,CAAEC,QAAQ,CAACF,KAAK,CAACG,SAAP,CAA3B,CAIA,GAAIC,CAAAA,CAAC,CAAG,GAAIN,CAAAA,QAAQ,CAACO,eAAb,CAA6BJ,aAA7B,CAAR,CAGCD,KAAK,CAACM,QAAP,CAAiBC,OAAjB,CAAyB,SAAAC,YAAY,CAAI,CAErC,GAAIC,CAAAA,KAAK,CAAEP,QAAQ,CAACM,YAAY,CAACE,SAAd,CAAnB,CACA,GAAIC,CAAAA,GAAG,CAAET,QAAQ,CAACM,YAAY,CAACI,OAAd,CAAjB,CACA,GAAIC,CAAAA,IAAI,CAAEX,QAAQ,CAACM,YAAY,CAACK,IAAd,CAAlB,CAGA;AACAT,CAAC,CAACU,OAAF,CAAU,GAAIhB,CAAAA,QAAQ,CAACiB,IAAb,CAAkBN,KAAlB,CAAyBE,GAAzB,CAA8BE,IAA9B,CAAV,EACH,CATD,EAaA,GAAIG,CAAAA,MAAM,CAAEd,QAAQ,CAACF,KAAK,CAACiB,IAAN,CAAW,CAAX,EAAcD,MAAf,CAApB,CACA,GAAIE,CAAAA,IAAI,CAAEhB,QAAQ,CAACF,KAAK,CAACiB,IAAN,CAAW,CAAX,EAAcE,WAAf,CAAlB,CAGA;AACA,GAAIC,CAAAA,QAAQ,CAAG,GAAItB,CAAAA,QAAQ,CAACuB,QAAb,CAAsBjB,CAAtB,CAAyBY,MAAzB,CAAf,CAEA;AACA,GAAIM,CAAAA,CAAC,CAAEJ,IAAP,CACA,GAAIK,CAAAA,IAAJ,CAGA,GAAGH,QAAQ,CAACI,SAAT,CAAmBF,CAAnB,CAAH,CAAyB,CACrBC,IAAI,CAAEH,QAAQ,CAACK,MAAT,CAAgBH,CAAhB,CAAN,CACH,CAED,QAASI,CAAAA,SAAT,CAAmBC,CAAnB,CAAqB,CAEjB,mBACI,8BAAKA,CAAC,CAACC,IAAF,EAAL,cAAoBD,CAAC,CAACE,EAAF,EAApB,aAAqCF,CAAC,CAACG,MAAvC,CADJ,CAGH,CAOD,mBACI,4CACI,2BAAK,KAAK,CAAE,CAACC,SAAS,CAAE,MAAZ,CAAZ,eAEI,+CAAmBf,MAAnB,CAFJ,cAGI,oDAAwBE,IAAxB,CAHJ,CADJ,cAOI,8BAPJ,cAQI,2CAAI,uCAAJ,KARJ,CAUKE,QAAQ,CAACI,SAAT,CAAmBF,CAAnB,EAAwBC,IAAI,CAACS,GAAL,CAASN,SAAT,CAAxB,cAA8C,8CAVnD,CAWKN,QAAQ,CAACI,SAAT,CAAmBF,CAAnB,eAAwB,2CAAI,6CAAJ,MAA2BF,QAAQ,CAACa,UAAT,CAAoBX,CAApB,CAA3B,CAAxB,CAAiF,IAXtF,CADJ,CAiBH,CAED,cAAevB,CAAAA,gBAAf","sourcesContent":["import React from \"react\";\r\nimport jsgraphs from \"js-graph-algorithms\";\r\n\r\nfunction DijkstraSolution(props){\r\n\r\n    let numberOfNodes= parseInt(props.nodeCount);\r\n\r\n\r\n\r\n    var g = new jsgraphs.WeightedDiGraph(numberOfNodes);\r\n\r\n\r\n    (props.mainData).forEach(NodeRelation => {\r\n        \r\n        let start= parseInt(NodeRelation.startNode);\r\n        let end= parseInt(NodeRelation.endNode);\r\n        let cost= parseInt(NodeRelation.cost);\r\n\r\n\r\n        // Creation of Edge\r\n        g.addEdge(new jsgraphs.Edge(start, end, cost));\r\n    });\r\n\r\n\r\n\r\n    let source= parseInt(props.data[0].source);\r\n    let dest= parseInt(props.data[0].destination);\r\n\r\n\r\n    // Start Node for algorithm\r\n    var dijkstra = new jsgraphs.Dijkstra(g, source);\r\n\r\n    // End Node\r\n    var v= dest;\r\n    var path;\r\n\r\n\r\n    if(dijkstra.hasPathTo(v)){\r\n        path= dijkstra.pathTo(v);\r\n    }\r\n\r\n    function printPath(p){\r\n\r\n        return(\r\n            <h4>{p.from()}  âžœ  {p.to()} : Cost= {p.weight}</h4>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <div style={{marginTop: \"10px\"}}>\r\n\r\n                <h3>Source Node : {source}</h3>\r\n                <h3>Destination Node : {dest}</h3>\r\n\r\n            </div>\r\n            <br></br>\r\n            <h3><b>Path : </b> </h3>\r\n\r\n            {dijkstra.hasPathTo(v) ? path.map(printPath) : <h4>No Path Found</h4>}\r\n            {dijkstra.hasPathTo(v) ? <h4><b>Total Cost : </b>  {dijkstra.distanceTo(v)}</h4>: null}\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DijkstraSolution;"]},"metadata":{},"sourceType":"module"}