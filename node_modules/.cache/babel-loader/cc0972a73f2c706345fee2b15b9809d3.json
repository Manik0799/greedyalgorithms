{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\GreedyAssignment\\\\assignment\\\\src\\\\Dijkstra\\\\main.js\";\nimport React, { useState } from \"react\";\nimport Input from \"./input\";\nimport DijkstraSolution from \"./solution\";\n\nfunction Solution() {\n  const [inputs, setInputs] = useState(0);\n  const [value, setValue] = useState(false);\n  const [solution, setSolution] = useState(false);\n\n  function handleChangeNumberOfInputs(event) {\n    let value = event.target.value;\n    setInputs(value);\n  } // const [cellValue, setCellValue]= useState([]);\n  // function handleChange(key, event){\n  //     const values= [...cellValue]\n  //     let x= values[key];\n  //     setCellValue(x);\n  // }\n  // let x=[]\n\n\n  function getCells() {// let count=0;\n    // for(let i=0;i<inputs;i++){\n    //     for(let j=0;j<inputs;j++){\n    //         x.push( <input key={count} type=\"number\" value={cellValue} onChange={(e) => handleChange(key, e)} className= \"cell\"></input>)\n    //         count++;\n    //     }\n    //     x.push(<br></br>)\n    // }\n    // console.log(x);\n    //     return(\n    //         <p>{x}</p>\n    //     )\n  }\n\n  function getSolution() {\n    setSolution(true);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid form\",\n    style: {\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-lg-6 col-sm-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    placeholder: \"Number of Nodes\",\n    onChange: e => {\n      handleChangeNumberOfInputs(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary getInputs\",\n    onClick: () => {\n      setValue(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, \"Insert data\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 25\n    }\n  }, \"Adjacency Matrix: write the edge weight in each cell which has an edge\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary getSolution\",\n    onClick: () => getSolution(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  }, \"Get Solution\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-lg-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, solution ? /*#__PURE__*/React.createElement(DijkstraSolution, {\n    data: x,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 37\n    }\n  }) : null))));\n}\n\nexport default Solution;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/GreedyAssignment/assignment/src/Dijkstra/main.js"],"names":["React","useState","Input","DijkstraSolution","Solution","inputs","setInputs","value","setValue","solution","setSolution","handleChangeNumberOfInputs","event","target","getCells","getSolution","marginTop","e","x"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,gBAAP,MAA6B,YAA7B;;AAGA,SAASC,QAAT,GAAmB;AAEf,QAAK,CAACC,MAAD,EAASC,SAAT,IAAqBL,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAK,CAACM,KAAD,EAAQC,QAAR,IAAmBP,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACQ,QAAD,EAAYC,WAAZ,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;;AAEA,WAASU,0BAAT,CAAoCC,KAApC,EAA0C;AACtC,QAAIL,KAAK,GAAEK,KAAK,CAACC,MAAN,CAAaN,KAAxB;AACAD,IAAAA,SAAS,CAACC,KAAD,CAAT;AACH,GATc,CAiBf;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA,WAASO,QAAT,GAAmB,CAEf;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEH;;AAQD,WAASC,WAAT,GAAsB;AAClBL,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAGD,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAsC,IAAA,KAAK,EAAE;AAACM,MAAAA,SAAS,EAAE;AAAZ,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAK,IAAA,SAAS,EAAE,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAK,IAAA,SAAS,EAAE,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,WAAW,EAAE,iBAFjB;AAGI,IAAA,QAAQ,EAAGC,CAAC,IAAG;AAACN,MAAAA,0BAA0B,CAACM,CAAD,CAA1B;AAA8B,KAHlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAQI;AAAQ,IAAA,SAAS,EAAE,2BAAnB;AAA+C,IAAA,OAAO,EAAG,MAAK;AAAET,MAAAA,QAAQ,CAAC,IAAD,CAAR;AAAe,KAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,eAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8EAVJ,eA6BI;AAAQ,IAAA,SAAS,EAAE,6BAAnB;AAAiD,IAAA,OAAO,EAAG,MAAMO,WAAW,EAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA7BJ,CAFJ,eAmCI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKN,QAAQ,gBAAG,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAGS,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAkC,IAD/C,CAnCJ,CAFJ,CADJ,CADJ;AAiDH;;AAGD,eAAed,QAAf","sourcesContent":["import React, {useState} from \"react\";\r\nimport Input from \"./input\";\r\nimport DijkstraSolution from \"./solution\";\r\n\r\n\r\nfunction Solution(){\r\n\r\n    const[inputs, setInputs]= useState(0);\r\n    const[value, setValue]= useState(false);\r\n    const [solution , setSolution]= useState(false);\r\n\r\n    function handleChangeNumberOfInputs(event){\r\n        let value= event.target.value;\r\n        setInputs(value);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // const [cellValue, setCellValue]= useState([]);\r\n\r\n    // function handleChange(key, event){\r\n    //     const values= [...cellValue]\r\n    //     let x= values[key];\r\n    //     setCellValue(x);\r\n    // }\r\n\r\n    // let x=[]\r\n    \r\n\r\n    function getCells(){\r\n\r\n        // let count=0;\r\n\r\n        // for(let i=0;i<inputs;i++){\r\n        //     for(let j=0;j<inputs;j++){\r\n\r\n        //         x.push( <input key={count} type=\"number\" value={cellValue} onChange={(e) => handleChange(key, e)} className= \"cell\"></input>)\r\n        //         count++;\r\n        //     }\r\n        //     x.push(<br></br>)\r\n            \r\n        // }\r\n            \r\n        // console.log(x);\r\n        //     return(\r\n        //         <p>{x}</p>\r\n        //     )\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function getSolution(){\r\n        setSolution(true);\r\n    }\r\n\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"container-fluid form\" style={{marginTop: \"20px\"}}>\r\n            \r\n                <div className= \"row\">\r\n\r\n                    <div className= \"col-lg-6 col-sm-12\">\r\n                        <input\r\n                            type=\"number\"\r\n                            placeholder= \"Number of Nodes\"\r\n                            onChange= {e =>{handleChangeNumberOfInputs(e)}}\r\n                        >\r\n                        </input>\r\n\r\n                        <button className= \"btn btn-primary getInputs\" onClick= {() =>{ setValue(true)} }>Insert data</button>\r\n                        <br></br>\r\n                        <h3>Adjacency Matrix: write the edge weight in each cell which has an edge</h3>\r\n\r\n\r\n\r\n\r\n\r\n{/*                         \r\n                        {value ?  \r\n\r\n                        getCells()\r\n                        \r\n                        : null}\r\n */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        <button className= \"btn btn-primary getSolution\" onClick= {() => getSolution()}>Get Solution</button>\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"col-lg-6\">\r\n                        {solution ? <DijkstraSolution data= {x}/>: null}\r\n                    </div>\r\n                        \r\n                </div>\r\n            </div>\r\n        </div>        \r\n        \r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Solution;"]},"metadata":{},"sourceType":"module"}