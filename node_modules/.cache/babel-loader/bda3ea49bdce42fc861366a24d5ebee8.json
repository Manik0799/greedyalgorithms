{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\GreedyAssignment\\\\assignment\\\\src\\\\Dijkstra\\\\main.js\";\nimport React, { useState } from \"react\";\nimport Input from \"./input\";\nimport DijkstraSolution from \"./solution\";\n\nfunction Solution() {\n  const [inputs, setInputs] = useState(0);\n  const [value, setValue] = useState(false);\n  const [solution, setSolution] = useState(false);\n\n  function handleChangeNumberOfInputs(event) {\n    let value = event.target.value;\n    setInputs(value);\n  }\n\n  const [cellValue, setCellValue] = useState([]);\n\n  function handleChange(key, event) {\n    const values = [...cellValue];\n    let x = values[key];\n    setCellValue(x);\n  }\n\n  let x = [];\n\n  function getCells() {\n    let count = 0;\n\n    for (let i = 0; i < inputs; i++) {\n      for (let j = 0; j < inputs; j++) {\n        x.push( /*#__PURE__*/React.createElement(\"input\", {\n          key: count,\n          type: \"number\",\n          value: cell,\n          onChange: e => handleChange(key, e),\n          className: \"cell\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 25\n          }\n        }));\n        count++;\n      }\n\n      x.push( /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 20\n        }\n      }));\n    }\n\n    console.log(x);\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, x);\n  }\n\n  function getSolution() {\n    setSolution(true);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid form\",\n    style: {\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-lg-6 col-sm-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    placeholder: \"Number of Nodes\",\n    onChange: e => {\n      handleChangeNumberOfInputs(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary getInputs\",\n    onClick: () => {\n      setValue(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, \"Insert data\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }, \"Adjacency Matrix: write the edge weight in each cell which has an edge\"), value ? getCells() : null, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary getSolution\",\n    onClick: () => getSolution(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, \"Get Solution\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-lg-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, solution ? /*#__PURE__*/React.createElement(DijkstraSolution, {\n    data: x,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 37\n    }\n  }) : null))));\n}\n\nexport default Solution;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/GreedyAssignment/assignment/src/Dijkstra/main.js"],"names":["React","useState","Input","DijkstraSolution","Solution","inputs","setInputs","value","setValue","solution","setSolution","handleChangeNumberOfInputs","event","target","cellValue","setCellValue","handleChange","key","values","x","getCells","count","i","j","push","cell","e","console","log","getSolution","marginTop"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport Input from \"./input\";\r\nimport DijkstraSolution from \"./solution\";\r\n\r\n\r\nfunction Solution(){\r\n\r\n    const[inputs, setInputs]= useState(0);\r\n    const[value, setValue]= useState(false);\r\n    const [solution , setSolution]= useState(false);\r\n\r\n    function handleChangeNumberOfInputs(event){\r\n        let value= event.target.value;\r\n        setInputs(value);\r\n    }\r\n\r\n\r\n\r\n    const [cellValue, setCellValue]= useState([]);\r\n\r\n    function handleChange(key, event){\r\n        const values= [...cellValue]\r\n        let x= values[key];\r\n        setCellValue(x);\r\n    }\r\n\r\n    let x=[]\r\n    \r\n\r\n    function getCells(){\r\n\r\n        let count=0;\r\n\r\n        for(let i=0;i<inputs;i++){\r\n            for(let j=0;j<inputs;j++){\r\n\r\n                x.push( <input key={count} type=\"number\" value={cell} onChange={(e) => handleChange(key, e)} className= \"cell\"></input>)\r\n                count++;\r\n            }\r\n            x.push(<br></br>)\r\n            \r\n        }\r\n            \r\n        console.log(x);\r\n            return(\r\n                <p>{x}</p>\r\n            )\r\n        \r\n    }\r\n\r\n    function getSolution(){\r\n        setSolution(true);\r\n    }\r\n\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"container-fluid form\" style={{marginTop: \"20px\"}}>\r\n            \r\n                <div className= \"row\">\r\n\r\n                    <div className= \"col-lg-6 col-sm-12\">\r\n                        <input\r\n                            type=\"number\"\r\n                            placeholder= \"Number of Nodes\"\r\n                            onChange= {e =>{handleChangeNumberOfInputs(e)}}\r\n                        >\r\n                        </input>\r\n\r\n                        <button className= \"btn btn-primary getInputs\" onClick= {() =>{ setValue(true)} }>Insert data</button>\r\n                        <br></br>\r\n                        <h3>Adjacency Matrix: write the edge weight in each cell which has an edge</h3>\r\n                        \r\n                        {value ?  \r\n\r\n                        getCells()\r\n                        \r\n                        : null}\r\n\r\n                        <button className= \"btn btn-primary getSolution\" onClick= {() => getSolution()}>Get Solution</button>\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"col-lg-6\">\r\n                        {solution ? <DijkstraSolution data= {x}/>: null}\r\n                    </div>\r\n                        \r\n                </div>\r\n            </div>\r\n        </div>        \r\n        \r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Solution;"]},"metadata":{},"sourceType":"module"}