{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\GreedyAssignment\\\\assignment\\\\src\\\\Dijkstra\\\\solution.js\";\nimport React from \"react\";\nimport jsgraphs from \"js-graph-algorithms\";\n\nfunction DijkstraSolution(props) {\n  let numberOfNodes = parseInt(props.nodeCount);\n  let source = parseInt(props.SandD.source);\n  let dest = parseInt(props.SandD.destination);\n  var g = new jsgraphs.WeightedDiGraph(numberOfNodes);\n  props.mainData.forEach(NodeRelation => {\n    let start = parseInt(NodeRelation.startNode);\n    let end = parseInt(NodeRelation.endNode);\n    let cost = parseInt(NodeRelation.cost); // Creation of Edge\n\n    g.addEdge(new jsgraphs.Edge(start, end, cost));\n  }); // Start Node for algorithm\n\n  var dijkstra = new jsgraphs.Dijkstra(g, source); // End Node\n\n  var v = dest;\n\n  if (dijkstra.hasPathTo(v)) {\n    var path = dijkstra.pathTo(v);\n\n    for (var i = 0; i < path.length; ++i) {\n      var e = path[i];\n      console.log(e.from() + ' => ' + e.to() + ': ' + e.weight);\n    }\n\n    console.log('distance: ' + dijkstra.distanceTo(v));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"Solution\"));\n}\n\nexport default DijkstraSolution;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/GreedyAssignment/assignment/src/Dijkstra/solution.js"],"names":["React","jsgraphs","DijkstraSolution","props","numberOfNodes","parseInt","nodeCount","source","SandD","dest","destination","g","WeightedDiGraph","mainData","forEach","NodeRelation","start","startNode","end","endNode","cost","addEdge","Edge","dijkstra","Dijkstra","v","hasPathTo","path","pathTo","i","length","e","console","log","from","to","weight","distanceTo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAgC;AAE5B,MAAIC,aAAa,GAAEC,QAAQ,CAACF,KAAK,CAACG,SAAP,CAA3B;AACA,MAAIC,MAAM,GAAEF,QAAQ,CAACF,KAAK,CAACK,KAAN,CAAYD,MAAb,CAApB;AACA,MAAIE,IAAI,GAAEJ,QAAQ,CAACF,KAAK,CAACK,KAAN,CAAYE,WAAb,CAAlB;AAGA,MAAIC,CAAC,GAAG,IAAIV,QAAQ,CAACW,eAAb,CAA6BR,aAA7B,CAAR;AAGCD,EAAAA,KAAK,CAACU,QAAP,CAAiBC,OAAjB,CAAyBC,YAAY,IAAI;AAErC,QAAIC,KAAK,GAAEX,QAAQ,CAACU,YAAY,CAACE,SAAd,CAAnB;AACA,QAAIC,GAAG,GAAEb,QAAQ,CAACU,YAAY,CAACI,OAAd,CAAjB;AACA,QAAIC,IAAI,GAAEf,QAAQ,CAACU,YAAY,CAACK,IAAd,CAAlB,CAJqC,CAOrC;;AACAT,IAAAA,CAAC,CAACU,OAAF,CAAU,IAAIpB,QAAQ,CAACqB,IAAb,CAAkBN,KAAlB,EAAyBE,GAAzB,EAA8BE,IAA9B,CAAV;AACH,GATD,EAV4B,CAyB5B;;AACA,MAAIG,QAAQ,GAAG,IAAItB,QAAQ,CAACuB,QAAb,CAAsBb,CAAtB,EAAyBJ,MAAzB,CAAf,CA1B4B,CA4B5B;;AACA,MAAIkB,CAAC,GAAEhB,IAAP;;AAEA,MAAGc,QAAQ,CAACG,SAAT,CAAmBD,CAAnB,CAAH,EAAyB;AAErB,QAAIE,IAAI,GAAGJ,QAAQ,CAACK,MAAT,CAAgBH,CAAhB,CAAX;;AAEA,SAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,IAAI,CAACG,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACjC,UAAIE,CAAC,GAAGJ,IAAI,CAACE,CAAD,CAAZ;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,IAAF,KAAW,MAAX,GAAoBH,CAAC,CAACI,EAAF,EAApB,GAA6B,IAA7B,GAAoCJ,CAAC,CAACK,MAAlD;AACH;;AAEDJ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAgBV,QAAQ,CAACc,UAAT,CAAoBZ,CAApB,CAA5B;AACP;;AAOG,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ;AAMH;;AAED,eAAevB,gBAAf","sourcesContent":["import React from \"react\";\r\nimport jsgraphs from \"js-graph-algorithms\";\r\n\r\nfunction DijkstraSolution(props){\r\n\r\n    let numberOfNodes= parseInt(props.nodeCount);\r\n    let source= parseInt(props.SandD.source);\r\n    let dest= parseInt(props.SandD.destination);\r\n\r\n\r\n    var g = new jsgraphs.WeightedDiGraph(numberOfNodes);\r\n\r\n\r\n    (props.mainData).forEach(NodeRelation => {\r\n        \r\n        let start= parseInt(NodeRelation.startNode);\r\n        let end= parseInt(NodeRelation.endNode);\r\n        let cost= parseInt(NodeRelation.cost);\r\n\r\n\r\n        // Creation of Edge\r\n        g.addEdge(new jsgraphs.Edge(start, end, cost));\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n    // Start Node for algorithm\r\n    var dijkstra = new jsgraphs.Dijkstra(g, source);\r\n\r\n    // End Node\r\n    var v= dest;\r\n\r\n    if(dijkstra.hasPathTo(v)){\r\n    \r\n        var path = dijkstra.pathTo(v);\r\n                \r\n        for(var i = 0; i < path.length; ++i) {\r\n            var e = path[i];\r\n            console.log(e.from() + ' => ' + e.to() + ': ' + e.weight);\r\n        }\r\n        \r\n        console.log('distance: '  + dijkstra.distanceTo(v) );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h1>Solution</h1>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DijkstraSolution;"]},"metadata":{},"sourceType":"module"}