{"ast":null,"code":"var data=[{name:\"Fractional knapsack\",description:\"Given a set of items, each with a weight and a value, determine a subset of items to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.\",link:\"/knapsack\"},{name:\"Minimum Spanning Tree\",description:\"Given a connected and undirected graph, a spanning tree of that graph is a subgraph that is a tree and connects all the vertices together.\",link:\"/mst\"},{name:\"Huffmann Coding\",description:\"A Huffman code is a particular type of optimal prefix code that is commonly used for lossless data compression. The process of finding or using such a code proceeds by means of Huffman coding\",link:\"/huffmann\"},{name:\"Task Scheduling Problem\",description:\"This is the dispute of optimally scheduling unit-time tasks on a single processor, where each job has a deadline and a penalty that necessary be paid if the deadline is missed.\",link:\"/taskscheduling\"},{name:\"Single source shortest path\",description:\"The shortest path problem is about finding a path between 2 vertices in a graph such that the total sum of the edges weights is minimum.\",link:\"/singlesource\"},{name:\"Graphs\",description:\"The time-input size graphs plotted for these algorithms.\",link:\"/graphs\"}];export default data;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/GreedyAssignment/assignment/src/data/card-data.js"],"names":["data","name","description","link"],"mappings":"AAAA,GAAMA,CAAAA,IAAI,CAAC,CACX,CACIC,IAAI,CAAE,qBADV,CAEIC,WAAW,CAAG,2NAFlB,CAGKC,IAAI,CAAE,WAHX,CADW,CAMX,CACIF,IAAI,CAAE,uBADV,CAEIC,WAAW,CAAG,4IAFlB,CAGKC,IAAI,CAAE,MAHX,CANW,CAWX,CACIF,IAAI,CAAE,iBADV,CAEIC,WAAW,CAAG,iMAFlB,CAGKC,IAAI,CAAE,WAHX,CAXW,CAgBX,CACIF,IAAI,CAAE,yBADV,CAEIC,WAAW,CAAG,kLAFlB,CAGKC,IAAI,CAAE,iBAHX,CAhBW,CAqBX,CACIF,IAAI,CAAE,6BADV,CAEIC,WAAW,CAAG,0IAFlB,CAGKC,IAAI,CAAE,eAHX,CArBW,CA0BX,CACIF,IAAI,CAAE,QADV,CAEIC,WAAW,CAAE,0DAFjB,CAGIC,IAAI,CAAE,SAHV,CA1BW,CAAX,CAiCA,cAAeH,CAAAA,IAAf","sourcesContent":["const data=[\r\n{\r\n    name: \"Fractional knapsack\",\r\n    description : \"Given a set of items, each with a weight and a value, determine a subset of items to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.\"\r\n    ,link: \"/knapsack\"\r\n},\r\n{\r\n    name: \"Minimum Spanning Tree\",\r\n    description : \"Given a connected and undirected graph, a spanning tree of that graph is a subgraph that is a tree and connects all the vertices together.\"\r\n    ,link: \"/mst\"\r\n},\r\n{\r\n    name: \"Huffmann Coding\",\r\n    description : \"A Huffman code is a particular type of optimal prefix code that is commonly used for lossless data compression. The process of finding or using such a code proceeds by means of Huffman coding\"\r\n    ,link: \"/huffmann\"\r\n},\r\n{\r\n    name: \"Task Scheduling Problem\",\r\n    description : \"This is the dispute of optimally scheduling unit-time tasks on a single processor, where each job has a deadline and a penalty that necessary be paid if the deadline is missed.\"\r\n    ,link: \"/taskscheduling\"\r\n},\r\n{\r\n    name: \"Single source shortest path\",\r\n    description : \"The shortest path problem is about finding a path between 2 vertices in a graph such that the total sum of the edges weights is minimum.\"\r\n    ,link: \"/singlesource\"\r\n},\r\n{\r\n    name: \"Graphs\",\r\n    description: \"The time-input size graphs plotted for these algorithms.\",\r\n    link: \"/graphs\"\r\n}\r\n];\r\n\r\nexport default data;"]},"metadata":{},"sourceType":"module"}