{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\GreedyAssignment\\\\assignment\\\\src\\\\Dijkstra\\\\solution.js\";\nimport React from \"react\";\nimport jsgraphs from \"js-graph-algorithms\";\n\nfunction DijkstraSolution(props) {\n  let numberOfNodes = props.nodeCount;\n  var g = new jsgraphs.WeightedDiGraph(numberOfNodes);\n  props.mainData.forEach(NodeRelation => {\n    let start = parseInt(NodeRelation.startNode);\n    let end = parseInt(NodeRelation.endNode);\n    let cost = parseInt(NodeRelation.cost);\n    console.log(start + \" \" + end + \" \" + cost); // Creation of Edge\n\n    g.addEdge(new jsgraphs.Edge(start, end, cost));\n  }); // Start Node for algorithm\n\n  var dijkstra = new jsgraphs.Dijkstra(g, props.source); // End Node\n\n  var v = props.destination;\n\n  if (dijkstra.hasPathTo(v)) {\n    var path = dijkstra.pathTo(v);\n\n    for (var i = 0; i < path.length; ++i) {\n      var e = path[i];\n      console.log(e.from() + ' => ' + e.to() + ': ' + e.weight);\n    }\n\n    console.log('distance: ' + dijkstra.distanceTo(v));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"Solution\"));\n}\n\nexport default DijkstraSolution;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/GreedyAssignment/assignment/src/Dijkstra/solution.js"],"names":["React","jsgraphs","DijkstraSolution","props","numberOfNodes","nodeCount","g","WeightedDiGraph","mainData","forEach","NodeRelation","start","parseInt","startNode","end","endNode","cost","console","log","addEdge","Edge","dijkstra","Dijkstra","source","v","destination","hasPathTo","path","pathTo","i","length","e","from","to","weight","distanceTo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAgC;AAE5B,MAAIC,aAAa,GAAED,KAAK,CAACE,SAAzB;AAGA,MAAIC,CAAC,GAAG,IAAIL,QAAQ,CAACM,eAAb,CAA6BH,aAA7B,CAAR;AAECD,EAAAA,KAAK,CAACK,QAAP,CAAiBC,OAAjB,CAAyBC,YAAY,IAAI;AAErC,QAAIC,KAAK,GAAEC,QAAQ,CAACF,YAAY,CAACG,SAAd,CAAnB;AACA,QAAIC,GAAG,GAAEF,QAAQ,CAACF,YAAY,CAACK,OAAd,CAAjB;AACA,QAAIC,IAAI,GAAEJ,QAAQ,CAACF,YAAY,CAACM,IAAd,CAAlB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,GAAG,GAAR,GAAaG,GAAb,GAAmB,GAAnB,GAAyBE,IAArC,EANqC,CAQrC;;AACAV,IAAAA,CAAC,CAACa,OAAF,CAAU,IAAIlB,QAAQ,CAACmB,IAAb,CAAkBT,KAAlB,EAAyBG,GAAzB,EAA8BE,IAA9B,CAAV;AACH,GAVD,EAP4B,CAuB5B;;AACA,MAAIK,QAAQ,GAAG,IAAIpB,QAAQ,CAACqB,QAAb,CAAsBhB,CAAtB,EAAyBH,KAAK,CAACoB,MAA/B,CAAf,CAxB4B,CA0B5B;;AACA,MAAIC,CAAC,GAACrB,KAAK,CAACsB,WAAZ;;AAEA,MAAGJ,QAAQ,CAACK,SAAT,CAAmBF,CAAnB,CAAH,EAAyB;AAErB,QAAIG,IAAI,GAAGN,QAAQ,CAACO,MAAT,CAAgBJ,CAAhB,CAAX;;AAEA,SAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,IAAI,CAACG,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACjC,UAAIE,CAAC,GAAGJ,IAAI,CAACE,CAAD,CAAZ;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYa,CAAC,CAACC,IAAF,KAAW,MAAX,GAAoBD,CAAC,CAACE,EAAF,EAApB,GAA6B,IAA7B,GAAoCF,CAAC,CAACG,MAAlD;AACH;;AAEDjB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAgBG,QAAQ,CAACc,UAAT,CAAoBX,CAApB,CAA5B;AACP;;AAOG,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ;AAMH;;AAED,eAAetB,gBAAf","sourcesContent":["import React from \"react\";\r\nimport jsgraphs from \"js-graph-algorithms\";\r\n\r\nfunction DijkstraSolution(props){\r\n\r\n    let numberOfNodes= props.nodeCount;\r\n\r\n\r\n    var g = new jsgraphs.WeightedDiGraph(numberOfNodes);\r\n\r\n    (props.mainData).forEach(NodeRelation => {\r\n        \r\n        let start= parseInt(NodeRelation.startNode);\r\n        let end= parseInt(NodeRelation.endNode);\r\n        let cost= parseInt(NodeRelation.cost);\r\n\r\n        console.log(start + \" \"+ end + \" \" + cost);\r\n\r\n        // Creation of Edge\r\n        g.addEdge(new jsgraphs.Edge(start, end, cost));\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n    // Start Node for algorithm\r\n    var dijkstra = new jsgraphs.Dijkstra(g, props.source);\r\n\r\n    // End Node\r\n    var v=props.destination;\r\n\r\n    if(dijkstra.hasPathTo(v)){\r\n    \r\n        var path = dijkstra.pathTo(v);\r\n                \r\n        for(var i = 0; i < path.length; ++i) {\r\n            var e = path[i];\r\n            console.log(e.from() + ' => ' + e.to() + ': ' + e.weight);\r\n        }\r\n        \r\n        console.log('distance: '  + dijkstra.distanceTo(v) );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h1>Solution</h1>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DijkstraSolution;"]},"metadata":{},"sourceType":"module"}