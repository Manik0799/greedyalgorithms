{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\ASUS\\\\Desktop\\\\GreedyAssignment\\\\assignment\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\ASUS\\\\Desktop\\\\GreedyAssignment\\\\assignment\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import DijkstraSolution from\"./solution\";function Solution(){var _useState=useState([{startNode:null,endNode:null,cost:null}]),_useState2=_slicedToArray(_useState,2),fields=_useState2[0],setFields=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),solution=_useState4[0],setSolution=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),numberOfNodes=_useState6[0],setNumber=_useState6[1];// For source and destination nodes\nvar _useState7=useState([{source:null,destination:null}]),_useState8=_slicedToArray(_useState7,2),algoData=_useState8[0],setAlgoData=_useState8[1];function handleStartNode(i,event){if(solution){setSolution(false);}var values=_toConsumableArray(fields);values[i].startNode=event.target.value;setFields(values);}function handleEndNode(i,event){if(solution){setSolution(false);}var values=_toConsumableArray(fields);values[i].endNode=event.target.value;setFields(values);}function handleEdgeWeight(i,event){if(solution){setSolution(false);}var values=_toConsumableArray(fields);values[i].cost=event.target.value;setFields(values);}function handleNumberOfNode(event){if(solution){setSolution(false);}var number=event.target.value;setNumber(number);}function handleSource(event){if(solution){setSolution(false);}var values=_toConsumableArray(algoData);values[0].source=event.target.value;setAlgoData(values);}function handleDestination(event){if(solution){setSolution(false);}var values=_toConsumableArray(algoData);values[0].destination=event.target.value;setAlgoData(values);}function handleAdd(){var values=_toConsumableArray(fields);values.push({startNode:null,endNode:null});setFields(values);}function handleRemove(i){var values=_toConsumableArray(fields);values.splice(i,1);setFields(values);}function getSolution(){setSolution(true);}return/*#__PURE__*/React.createElement(\"div\",{className:\"container form\",style:{marginTop:\"20px\"}},/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-lg-6\"},/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"input\",{style:{marginTop:\"10px\"},type:\"number\",value:numberOfNodes,placeholder:\"Number of Nodes\",onChange:function onChange(e){return handleNumberOfNode(e);}}),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"input\",{style:{marginTop:\"10px\"},type:\"number\",value:algoData.source,placeholder:\"Source Node\",onChange:function onChange(e){return handleSource(e);}}),/*#__PURE__*/React.createElement(\"input\",{style:{marginLeft:\"8px\",marginTop:\"10px\"},type:\"number\",value:algoData.destination,placeholder:\"Destination Node\",onChange:function onChange(e){return handleDestination(e);}}),/*#__PURE__*/React.createElement(\"h2\",null,\"Valid node Labels: 0 to \",numberOfNodes-1),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"btn btn-primary addbtn\",onClick:function onClick(){return handleAdd();}},\"Add Node Relation\"),fields.map(function(field,idx){return/*#__PURE__*/React.createElement(\"div\",{key:\"\".concat(field,\"-\").concat(idx),className:\"inputs\"},/*#__PURE__*/React.createElement(\"input\",{type:\"number\",value:field.startNode,placeholder:\"Start Node\",onChange:function onChange(e){return handleStartNode(idx,e);}}),/*#__PURE__*/React.createElement(\"input\",{style:{marginLeft:\"10px\"},type:\"number\",value:field.endNode,placeholder:\"End Node\",onChange:function onChange(e){return handleEndNode(idx,e);}}),/*#__PURE__*/React.createElement(\"input\",{style:{marginLeft:\"5px\"},type:\"number\",value:field.cost,placeholder:\"Cost\",onChange:function onChange(e){return handleEdgeWeight(idx,e);}}),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"btn btn-primary removebtn\",onClick:function onClick(){return handleRemove(idx);}},\"Delete\"));}),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"button\",{className:\"btn btn-primary\",style:{marginTop:\"10px\",backgroundColor:\"#263145\"},onClick:function onClick(){return getSolution();}},\"Get Solution\")),/*#__PURE__*/React.createElement(\"div\",{className:\"col-lg-6\"},solution?/*#__PURE__*/React.createElement(DijkstraSolution,{mainData:_toConsumableArray(fields),nodeCount:numberOfNodes,data:_toConsumableArray(algoData)}):null)));}export default Solution;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/GreedyAssignment/assignment/src/Dijkstra/main.js"],"names":["React","useState","DijkstraSolution","Solution","startNode","endNode","cost","fields","setFields","solution","setSolution","numberOfNodes","setNumber","source","destination","algoData","setAlgoData","handleStartNode","i","event","values","target","value","handleEndNode","handleEdgeWeight","handleNumberOfNode","number","handleSource","handleDestination","handleAdd","push","handleRemove","splice","getSolution","marginTop","e","marginLeft","map","field","idx","backgroundColor"],"mappings":"4WAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,YAA7B,CAGA,QAASC,CAAAA,QAAT,EAAmB,eAEaF,QAAQ,CAAC,CAAC,CAAEG,SAAS,CAAE,IAAb,CAAmBC,OAAO,CAAE,IAA5B,CAAkCC,IAAI,CAAE,IAAxC,CAAD,CAAD,CAFrB,wCAERC,MAFQ,eAEAC,SAFA,8BAGgBP,QAAQ,CAAC,KAAD,CAHxB,yCAGRQ,QAHQ,eAGEC,WAHF,8BAImBT,QAAQ,CAAC,IAAD,CAJ3B,yCAIRU,aAJQ,eAIOC,SAJP,eAKf;AALe,eAMgBX,QAAQ,CAAC,CAAC,CAACY,MAAM,CAAE,IAAT,CAAeC,WAAW,CAAE,IAA5B,CAAD,CAAD,CANxB,yCAMRC,QANQ,eAMEC,WANF,eASf,QAASC,CAAAA,eAAT,CAAyBC,CAAzB,CAA4BC,KAA5B,CAAmC,CAE/B,GAAGV,QAAH,CAAY,CACRC,WAAW,CAAC,KAAD,CAAX,CACH,CACH,GAAMU,CAAAA,MAAM,oBAAOb,MAAP,CAAZ,CACAa,MAAM,CAACF,CAAD,CAAN,CAAUd,SAAV,CAAsBe,KAAK,CAACE,MAAN,CAAaC,KAAnC,CACAd,SAAS,CAACY,MAAD,CAAT,CACD,CAED,QAASG,CAAAA,aAAT,CAAuBL,CAAvB,CAA0BC,KAA1B,CAAgC,CAC5B,GAAGV,QAAH,CAAY,CACRC,WAAW,CAAC,KAAD,CAAX,CACH,CACD,GAAMU,CAAAA,MAAM,oBAAOb,MAAP,CAAZ,CACAa,MAAM,CAACF,CAAD,CAAN,CAAUb,OAAV,CAAoBc,KAAK,CAACE,MAAN,CAAaC,KAAjC,CACAd,SAAS,CAACY,MAAD,CAAT,CACH,CAED,QAASI,CAAAA,gBAAT,CAA0BN,CAA1B,CAA6BC,KAA7B,CAAmC,CAC/B,GAAGV,QAAH,CAAY,CACRC,WAAW,CAAC,KAAD,CAAX,CACH,CACD,GAAMU,CAAAA,MAAM,oBAAOb,MAAP,CAAZ,CACAa,MAAM,CAACF,CAAD,CAAN,CAAUZ,IAAV,CAAiBa,KAAK,CAACE,MAAN,CAAaC,KAA9B,CACAd,SAAS,CAACY,MAAD,CAAT,CACH,CAED,QAASK,CAAAA,kBAAT,CAA4BN,KAA5B,CAAkC,CAC9B,GAAGV,QAAH,CAAY,CACRC,WAAW,CAAC,KAAD,CAAX,CACH,CAED,GAAMgB,CAAAA,MAAM,CAAEP,KAAK,CAACE,MAAN,CAAaC,KAA3B,CAEAV,SAAS,CAACc,MAAD,CAAT,CAGH,CAED,QAASC,CAAAA,YAAT,CAAsBR,KAAtB,CAA4B,CACxB,GAAGV,QAAH,CAAY,CACRC,WAAW,CAAC,KAAD,CAAX,CACH,CAED,GAAMU,CAAAA,MAAM,oBAAOL,QAAP,CAAZ,CACAK,MAAM,CAAC,CAAD,CAAN,CAAUP,MAAV,CAAmBM,KAAK,CAACE,MAAN,CAAaC,KAAhC,CACAN,WAAW,CAACI,MAAD,CAAX,CACH,CAED,QAASQ,CAAAA,iBAAT,CAA2BT,KAA3B,CAAiC,CAC7B,GAAGV,QAAH,CAAY,CACRC,WAAW,CAAC,KAAD,CAAX,CACH,CACD,GAAMU,CAAAA,MAAM,oBAAOL,QAAP,CAAZ,CACAK,MAAM,CAAC,CAAD,CAAN,CAAUN,WAAV,CAAwBK,KAAK,CAACE,MAAN,CAAaC,KAArC,CACAN,WAAW,CAACI,MAAD,CAAX,CACH,CAED,QAASS,CAAAA,SAAT,EAAqB,CACnB,GAAMT,CAAAA,MAAM,oBAAOb,MAAP,CAAZ,CACAa,MAAM,CAACU,IAAP,CAAY,CAAE1B,SAAS,CAAE,IAAb,CAAmBC,OAAO,CAAE,IAA5B,CAAZ,EACAG,SAAS,CAACY,MAAD,CAAT,CACD,CAED,QAASW,CAAAA,YAAT,CAAsBb,CAAtB,CAAyB,CACvB,GAAME,CAAAA,MAAM,oBAAOb,MAAP,CAAZ,CACAa,MAAM,CAACY,MAAP,CAAcd,CAAd,CAAiB,CAAjB,EACAV,SAAS,CAACY,MAAD,CAAT,CACD,CAED,QAASa,CAAAA,WAAT,EAAsB,CAElBvB,WAAW,CAAC,IAAD,CAAX,CACH,CAGD,mBAEE,2BAAK,SAAS,CAAC,gBAAf,CAAgC,KAAK,CAAE,CAACwB,SAAS,CAAE,MAAZ,CAAvC,eACA,2BAAK,SAAS,CAAE,KAAhB,eACI,2BAAK,SAAS,CAAE,UAAhB,eAEM,8BAFN,cAMM,6BACI,KAAK,CAAE,CAACA,SAAS,CAAE,MAAZ,CADX,CAEI,IAAI,CAAC,QAFT,CAGI,KAAK,CAAGvB,aAHZ,CAII,WAAW,CAAE,iBAJjB,CAKI,QAAQ,CAAG,kBAAAwB,CAAC,QAAIV,CAAAA,kBAAkB,CAACU,CAAD,CAAtB,EALhB,EANN,cAaM,8BAbN,cAeM,6BACI,KAAK,CAAE,CAACD,SAAS,CAAE,MAAZ,CADX,CAEI,IAAI,CAAC,QAFT,CAGI,KAAK,CAAGnB,QAAQ,CAACF,MAHrB,CAII,WAAW,CAAE,aAJjB,CAKI,QAAQ,CAAG,kBAAAsB,CAAC,QAAIR,CAAAA,YAAY,CAACQ,CAAD,CAAhB,EALhB,EAfN,cAsBM,6BACI,KAAK,CAAE,CAACC,UAAU,CAAE,KAAb,CAAoBF,SAAS,CAAE,MAA/B,CADX,CAEI,IAAI,CAAC,QAFT,CAGI,KAAK,CAAGnB,QAAQ,CAACD,WAHrB,CAII,WAAW,CAAE,kBAJjB,CAKI,QAAQ,CAAG,kBAAAqB,CAAC,QAAIP,CAAAA,iBAAiB,CAACO,CAAD,CAArB,EALhB,EAtBN,cA+BM,yDAA6BxB,aAAa,CAAC,CAA3C,CA/BN,cAiCM,8BAAQ,IAAI,CAAC,QAAb,CAAsB,SAAS,CAAC,wBAAhC,CAAyD,OAAO,CAAE,yBAAMkB,CAAAA,SAAS,EAAf,EAAlE,sBAjCN,CAqCOtB,MAAM,CAAC8B,GAAP,CAAW,SAACC,KAAD,CAAQC,GAAR,CAAgB,CAC5B,mBACI,2BAAK,GAAG,WAAKD,KAAL,aAAcC,GAAd,CAAR,CAA6B,SAAS,CAAE,QAAxC,eACA,6BACI,IAAI,CAAC,QADT,CAEI,KAAK,CAAED,KAAK,CAAClC,SAFjB,CAGI,WAAW,CAAC,YAHhB,CAII,QAAQ,CAAE,kBAAA+B,CAAC,QAAIlB,CAAAA,eAAe,CAACsB,GAAD,CAAMJ,CAAN,CAAnB,EAJf,EADA,cAOA,6BAAO,KAAK,CAAE,CAACC,UAAU,CAAE,MAAb,CAAd,CACI,IAAI,CAAC,QADT,CAEI,KAAK,CAAEE,KAAK,CAACjC,OAFjB,CAGI,WAAW,CAAC,UAHhB,CAII,QAAQ,CAAE,kBAAA8B,CAAC,QAAIZ,CAAAA,aAAa,CAACgB,GAAD,CAAMJ,CAAN,CAAjB,EAJf,EAPA,cAaA,6BAAO,KAAK,CAAE,CAACC,UAAU,CAAE,KAAb,CAAd,CACI,IAAI,CAAC,QADT,CAEI,KAAK,CAAEE,KAAK,CAAChC,IAFjB,CAGI,WAAW,CAAC,MAHhB,CAII,QAAQ,CAAE,kBAAA6B,CAAC,QAAIX,CAAAA,gBAAgB,CAACe,GAAD,CAAMJ,CAAN,CAApB,EAJf,EAbA,cAoBA,8BAAQ,IAAI,CAAC,QAAb,CAAsB,SAAS,CAAE,2BAAjC,CAA6D,OAAO,CAAE,yBAAMJ,CAAAA,YAAY,CAACQ,GAAD,CAAlB,EAAtE,WApBA,CADJ,CA0BC,CA3BA,CArCP,cAiEM,8BAjEN,cAoEM,8BACA,SAAS,CAAC,iBADV,CAEA,KAAK,CAAE,CAACL,SAAS,CAAE,MAAZ,CAAoBM,eAAe,CAAE,SAArC,CAFP,CAGA,OAAO,CAAE,yBAAMP,CAAAA,WAAW,EAAjB,EAHT,iBApEN,CADJ,cA8EI,2BAAK,SAAS,CAAE,UAAhB,EAEGxB,QAAQ,cACT,oBAAC,gBAAD,EACI,QAAQ,oBAAQF,MAAR,CADZ,CAEI,SAAS,CAAGI,aAFhB,CAGI,IAAI,oBAAOI,QAAP,CAHR,EADS,CAMP,IARJ,CA9EJ,CADA,CAFF,CAiGH,CAGD,cAAeZ,CAAAA,QAAf","sourcesContent":["import React, {useState} from \"react\";\r\nimport DijkstraSolution from \"./solution\";\r\n\r\n\r\nfunction Solution(){\r\n\r\n    const [fields, setFields] = useState([{ startNode: null, endNode: null, cost: null}]);\r\n    const [solution, setSolution]= useState(false);\r\n    const [numberOfNodes, setNumber]= useState(null);\r\n    // For source and destination nodes\r\n    const [algoData, setAlgoData]= useState([{source: null, destination: null}])\r\n  \r\n\r\n    function handleStartNode(i, event) {\r\n\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n      const values = [...fields];\r\n      values[i].startNode = event.target.value;\r\n      setFields(values);\r\n    }\r\n\r\n    function handleEndNode(i, event){\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n        const values = [...fields];\r\n        values[i].endNode = event.target.value;\r\n        setFields(values);\r\n    }\r\n\r\n    function handleEdgeWeight(i, event){\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n        const values = [...fields];\r\n        values[i].cost = event.target.value;\r\n        setFields(values);\r\n    }\r\n\r\n    function handleNumberOfNode(event){\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n\r\n        const number= event.target.value;\r\n\r\n        setNumber(number);\r\n\r\n         \r\n    }\r\n\r\n    function handleSource(event){\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n\r\n        const values = [...algoData];\r\n        values[0].source = event.target.value;\r\n        setAlgoData(values);\r\n    }\r\n\r\n    function handleDestination(event){\r\n        if(solution){\r\n            setSolution(false);\r\n        }\r\n        const values = [...algoData];\r\n        values[0].destination = event.target.value;\r\n        setAlgoData(values);\r\n    }\r\n  \r\n    function handleAdd() {\r\n      const values = [...fields];\r\n      values.push({ startNode: null, endNode: null });\r\n      setFields(values);\r\n    }\r\n  \r\n    function handleRemove(i) {\r\n      const values = [...fields];\r\n      values.splice(i, 1);\r\n      setFields(values);\r\n    }\r\n\r\n    function getSolution(){\r\n                \r\n        setSolution(true);\r\n    }\r\n\r\n  \r\n    return (\r\n\r\n      <div className=\"container form\" style={{marginTop: \"20px\"}}>\r\n      <div className= \"row\">\r\n          <div className= \"col-lg-6\">\r\n\r\n                <br></br>\r\n\r\n               \r\n\r\n                <input\r\n                    style={{marginTop: \"10px\"}}\r\n                    type=\"number\"\r\n                    value= {numberOfNodes}\r\n                    placeholder= \"Number of Nodes\"\r\n                    onChange= {e => handleNumberOfNode(e)}\r\n                ></input>\r\n                <br></br>\r\n\r\n                <input\r\n                    style={{marginTop: \"10px\"}}\r\n                    type=\"number\"\r\n                    value= {algoData.source}\r\n                    placeholder= \"Source Node\"\r\n                    onChange= {e => handleSource(e)}\r\n                ></input>\r\n                <input\r\n                    style={{marginLeft: \"8px\", marginTop: \"10px\"}}\r\n                    type=\"number\"\r\n                    value= {algoData.destination}\r\n                    placeholder= \"Destination Node\"\r\n                    onChange= {e => handleDestination(e)}\r\n                ></input>\r\n\r\n\r\n                <h2>Valid node Labels: 0 to {numberOfNodes-1}</h2>\r\n\r\n                <button type=\"button\" className=\"btn btn-primary addbtn\" onClick={() => handleAdd()}>\r\n                Add Node Relation\r\n                </button>\r\n        \r\n                {fields.map((field, idx) => {\r\n                return (\r\n                    <div key={`${field}-${idx}`} className= \"inputs\">\r\n                    <input\r\n                        type=\"number\" \r\n                        value={field.startNode} \r\n                        placeholder=\"Start Node\" \r\n                        onChange={e => handleStartNode(idx, e)}\r\n                    />\r\n                    <input style={{marginLeft: \"10px\"}}\r\n                        type=\"number\" \r\n                        value={field.endNode} \r\n                        placeholder=\"End Node\" \r\n                        onChange={e => handleEndNode(idx, e)}\r\n                    />\r\n                    <input style={{marginLeft: \"5px\"}}\r\n                        type=\"number\" \r\n                        value={field.cost} \r\n                        placeholder=\"Cost\" \r\n                        onChange={e => handleEdgeWeight(idx, e)}\r\n                    />\r\n\r\n                    <button type=\"button\" className= \"btn btn-primary removebtn\" onClick={() => handleRemove(idx)}>\r\n                        Delete \r\n                    </button>\r\n                    </div>\r\n                );\r\n                })}\r\n                <br></br>\r\n\r\n                {/* Get the Solution button */}\r\n                <button \r\n                className=\"btn btn-primary\" \r\n                style={{marginTop: \"10px\", backgroundColor: \"#263145\"}}\r\n                onClick={() => getSolution()}\r\n                >\r\n                Get Solution\r\n                </button>\r\n          </div>\r\n\r\n          <div className= \"col-lg-6\">\r\n            {/* Rendering solution component based on the value of solution variable */}\r\n            {solution ?\r\n            <DijkstraSolution \r\n                mainData = {[...fields]}\r\n                nodeCount= {numberOfNodes}\r\n                data= {[...algoData]}\r\n                />\r\n            : null}\r\n\r\n          </div>\r\n      </div>\r\n  \r\n        \r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Solution;"]},"metadata":{},"sourceType":"module"}