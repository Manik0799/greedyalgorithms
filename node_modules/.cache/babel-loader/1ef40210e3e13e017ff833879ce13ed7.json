{"ast":null,"code":"const data = [{\n  name: \"Fractional knapsack\",\n  description: \"Given a set of items, each with a weight and a value, determine a subset of items to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.\",\n  link: \"/knapsack\"\n}, {\n  name: \"Minimum Spanning Tree\",\n  description: \"Given a connected and undirected graph, a spanning tree of that graph is a subgraph that is a tree and connects all the vertices together.\",\n  link: \"/mst\"\n}, {\n  name: \"Huffmann Coding\",\n  description: \"A Huffman code is a particular type of optimal prefix code that is commonly used for lossless data compression. The process of finding or using such a code proceeds by means of Huffman coding\",\n  link: \"/huffmann\"\n}, {\n  name: \"Task Scheduling Problem\",\n  description: \"This is the dispute of optimally scheduling unit-time tasks on a single processor, where each job has a deadline and a penalty that necessary be paid if the deadline is missed.\",\n  link: \"/taskscheduling\"\n}, {\n  name: \"Single source shortest path\",\n  description: \"The shortest path problem is about finding a path between 2 vertices in a graph such that the total sum of the edges weights is minimum.\",\n  link: \"/singlesource\"\n}, {\n  name: \"Graphs\",\n  description: \"The time-input size graphs plotted for these algrithms.\",\n  link: \"/graphs\"\n}];\nexport default data;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/GreedyAssignment/assignment/src/data/card-data.js"],"names":["data","name","description","link"],"mappings":"AAAA,MAAMA,IAAI,GAAC,CACX;AACIC,EAAAA,IAAI,EAAE,qBADV;AAEIC,EAAAA,WAAW,EAAG,2NAFlB;AAGKC,EAAAA,IAAI,EAAE;AAHX,CADW,EAMX;AACIF,EAAAA,IAAI,EAAE,uBADV;AAEIC,EAAAA,WAAW,EAAG,4IAFlB;AAGKC,EAAAA,IAAI,EAAE;AAHX,CANW,EAWX;AACIF,EAAAA,IAAI,EAAE,iBADV;AAEIC,EAAAA,WAAW,EAAG,iMAFlB;AAGKC,EAAAA,IAAI,EAAE;AAHX,CAXW,EAgBX;AACIF,EAAAA,IAAI,EAAE,yBADV;AAEIC,EAAAA,WAAW,EAAG,kLAFlB;AAGKC,EAAAA,IAAI,EAAE;AAHX,CAhBW,EAqBX;AACIF,EAAAA,IAAI,EAAE,6BADV;AAEIC,EAAAA,WAAW,EAAG,0IAFlB;AAGKC,EAAAA,IAAI,EAAE;AAHX,CArBW,EA0BX;AACIF,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,WAAW,EAAE,yDAFjB;AAGIC,EAAAA,IAAI,EAAE;AAHV,CA1BW,CAAX;AAiCA,eAAeH,IAAf","sourcesContent":["const data=[\r\n{\r\n    name: \"Fractional knapsack\",\r\n    description : \"Given a set of items, each with a weight and a value, determine a subset of items to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.\"\r\n    ,link: \"/knapsack\"\r\n},\r\n{\r\n    name: \"Minimum Spanning Tree\",\r\n    description : \"Given a connected and undirected graph, a spanning tree of that graph is a subgraph that is a tree and connects all the vertices together.\"\r\n    ,link: \"/mst\"\r\n},\r\n{\r\n    name: \"Huffmann Coding\",\r\n    description : \"A Huffman code is a particular type of optimal prefix code that is commonly used for lossless data compression. The process of finding or using such a code proceeds by means of Huffman coding\"\r\n    ,link: \"/huffmann\"\r\n},\r\n{\r\n    name: \"Task Scheduling Problem\",\r\n    description : \"This is the dispute of optimally scheduling unit-time tasks on a single processor, where each job has a deadline and a penalty that necessary be paid if the deadline is missed.\"\r\n    ,link: \"/taskscheduling\"\r\n},\r\n{\r\n    name: \"Single source shortest path\",\r\n    description : \"The shortest path problem is about finding a path between 2 vertices in a graph such that the total sum of the edges weights is minimum.\"\r\n    ,link: \"/singlesource\"\r\n},\r\n{\r\n    name: \"Graphs\",\r\n    description: \"The time-input size graphs plotted for these algrithms.\",\r\n    link: \"/graphs\"\r\n}\r\n];\r\n\r\nexport default data;"]},"metadata":{},"sourceType":"module"}